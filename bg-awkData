#!/usr/bin/env bash

###############################################################################
# Includes and defines

projectName=bg-core

source /usr/lib/bg_core.sh
import bg_awkDataQueries.sh ;$L1;$L2
import bg_awkDataBC.sh ;$L1;$L2

supportedCmds="query count get"

###############################################################################
# Command manpage
# usage: bg-core [-q|-v] templates [<subCmdOptions>] [<subCmdArguments>]
# query and manipulate general host settings and resources.
# The bg-core package provides various addons to the base OS distribution.
#
# Sub Commands:
#  * templates : find and list templates installed from various packages
#  * cuiWin    : query and manipulate terminal windows participating in various script UI
#  * dropin    : see status of and enable/disable various dropin configurations
#  * config    : query and set host and domain configuration settings
#
# See Also:

###############################################################################
# Functions

# this is invoked by oob_invokeOutOfBandSystem when -hb is the first param
# The bash completion script calls this get the list of possible words.
function oob_printBashCompletion()
{
	bgBCParse "<glean>" "$@"; set -- "${posWords[@]:1}"

	awkDataID="$1"

	cmd="query"
	[ "${options["-c"]}" ] && cmd="count"
	[ "${options["-g"]}" ] && cmd="get"

	case $opt:$cmd:$posCwords in
		*:1)
			if [[ ! "$awkDataID" =~ [.] ]]; then
				echo '$(suffix:%3A)'
				awkData_query -c assetName manifest assetType:~awkDataSchema
				[ "$awkDataID" ] && echo '<appendDotToSpecifyColumns>'
			else
				local columns="${awkDataID#*.}"
				awkDataID="${awkDataID%%.*}"
				echo "\$(cur:$columns)"
				completeAwkDataColumnList "$awkDataID" "$columns"
			fi
			;;
		:*)
			awkDataID="${awkDataID%%.*}"
			shift # <awkID>
			completeAwkDataQueryTerms --cur="$cur" "$awkDataID" $((posCwords-2)) "$@"
			;;
		-c:*) if [ "$awkDataID" ]; then
				completeAwkDataColumnList "$awkDataID" "${options["-c"]}"
			else
				echo "<enter_the_first_arg_before_entering_-c>"
			fi
	esac
	exit
}

# Use this function to provide BC suggestions for positional parameters
# see man bg-overviewOutOfBandScriptFunctions for details
function oob_helpMode()
{
	local words cword cur prev optWords posWords posCwords
	parseForBashCompletion --compat2 words cword cur prev optWords posWords posCwords "$@"

	local cmd="${posWords[1]}"
	case ${cmd:-main} in
		main)  man "$(basename $0)" ;;
		*)     man "$(basename $0)" ;;
	esac
}










###############################################################################
# Main script

# default values for parameters
verbosity=1
cmd=""
passThruOpts=()
oob_invokeOutOfBandSystem "$@"
while [ $# -gt 0 ]; do case $1 in
	-q|--query)    cmd="query"  ;;
	-s|--summary)  cmd="summary"  ;;
	-g|--get)      cmd="get"  ;;

	-c*|--columns*)      bgOptionGetOpt opt: passThruOpts "$@" && shift ;;
	-n|--noDirtyCheck)   bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-f|--forceRebuild)   bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-r|--refresh)        bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-e|--escapeOutput)   bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-H|--header)         bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-F*|--tblFormat*)    bgOptionGetOpt opt: passThruOpts "$@" && shift ;;
	-w|--wiki)           bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-p|--plainFilter)    bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-1|--assertOneValue) bgOptionGetOpt opt passThruOpts "$@" && shift ;;

	*)  bgOptionsEndLoop "$@" && break; set -- "${bgOptionsExpandedOpts[@]}"; esac; shift;
done

awkDataID="$1"; shift

case ${cmd:-query} in
	query)      awkData_query        "${passThruOpts[@]}" "$awkDataID" "$@" ;;
	summary)    awkData_countValues  "${passThruOpts[@]}" "$awkDataID" "$@" ;;
	get)        awkData_getValue     "${passThruOpts[@]}" "$awkDataID" "$@" ;;
	*) assertError -v cmd "unknown cmd" ;;
esac
