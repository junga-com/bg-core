#!/usr/bin/env bash

###############################################################################
# Includes and defines

packageName=bg-core

source /usr/lib/bg_core.sh
import bg_awkDataQueries.sh ;$L1;$L2
import bg_awkDataBC.sh ;$L1;$L2

supportedCmds="query count get"

###############################################################################
# Command manpage
# usage: bg-awkData -q|--query     [options] <awkDataID> [<filterTerm1>...<filterTermN>]
# usage: bg-awkData -s|--summary   [options] <awkDataID> [<filterTerm1>...<filterTermN>]
# usage: bg-awkData -g|--get       [options] <awkDataID> [<filterTerm1>...<filterTermN>]
# usage: bg-awkData -i|--tableInfo [options] <awkDataID>
# query and manipulate general host settings and resources.
# The bg-core package provides various addons to the base OS distribution.
#
# Sub Commands:
#  * templates : find and list templates installed from various packages
#  * cuiWin    : query and manipulate terminal windows participating in various script UI
#  * dropin    : see status of and enable/disable various dropin configurations
#  * config    : query and set host and domain configuration settings
#
# Options:
#   Operations...
#    -q|--query)          : query a table with filters
#    -s|--summary)        : query a table for unique values of one or more columns showing how many times each unique value appears
#    -g|--get)            : return the value of one or more columns for a set of filters. This is similar to query but has a different
#                           signature to make it easier to get a specific value. Typically this is used with a primary key type query
#                           to identify a single row.
#    -i|--tableInfo)      : pint out the schema information for a table
#
#   Other options...
#    -c*|--columns*)      : specify the columns that should be in the result set. You can also list the columns after the <awkDataID>
#                           i.e. "bg-awkData manifest.assetType,assetName" is the same as "bg-awkData -c assetType,assetName manifest"
#    -n|--noDirtyCheck)   : assume the table is up-to-date and do not try to rebuild it even if its dirty
#    -f|--forceRebuild)   : attempt a rebuild of the table unconditionally before going on to perform the specified operation.
#    -r|--refresh)        : attempt a rebuild of the table unconditionally and return without attempting an operation
#    -e|--escapeOutput)   : do not unescape the output. This would mean that spaces in fields will be represented as %20 and the
#                           only whitespace in the output will be the separators between column values.
#    -H|--header)         : display the column names before the query results
#    -F*|--tblFormat*)    : specify a different template to format the result set into the output
#    -w|--wiki)           : shortcut for -Fwiki
#    -p|--plainFilter)    : ignore the default filters specified in the schema. For example, a schema might have a default filter
#                           that excludes records with a archived column set. Normally the user does not want to see those but this
#                           option gives the user a chance to query the archived records too.
#    -1|--assertOneValue) : declare that the query filters should act as a primary key to make sure that the result set includes
#                           exactly one record if its found or no records if it is not.  If the query has multiple result records
#                           an assertError will be thrown
#
# Params:
#    <awkDataID>  : the table identifier. Its either the assetName of an awkDataSchema assetType in the hostmanifest or it can be
#                   a path to a schema or data file.
# See Also:

###############################################################################
# Functions

# this is invoked by oob_invokeOutOfBandSystem when -hb is the first param
# The bash completion script calls this get the list of possible words.
function oob_printBashCompletion()
{
	bgBCParse "<glean>" "$@"; set -- "${posWords[@]:1}"

	awkDataID="$1"

	cmd="query"
	[ "${options["-c"]}" ] && cmd="count"
	[ "${options["-g"]}" ] && cmd="get"

	case $opt:$cmd:$posCwords in
		*:1)
			if [[ ! "$awkDataID" =~ [.] ]]; then
				echo '$(suffix:%3A)'
				awkData_query -c assetName manifest assetType:~awkDataSchema
				[ "$awkDataID" ] && echo '<appendDotToSpecifyColumns>'
			else
				local columns="${awkDataID#*.}"
				awkDataID="${awkDataID%%.*}"
				echo "\$(cur:$columns)"
				completeAwkDataColumnList "$awkDataID" "$columns"
			fi
			;;
		:*)
			awkDataID="${awkDataID%%.*}"
			shift # <awkID>
			completeAwkDataQueryTerms --cur="$cur" "$awkDataID" $((posCwords-2)) "$@"
			;;
		-c:*) if [ "$awkDataID" ]; then
				completeAwkDataColumnList "$awkDataID" "${options["-c"]}"
			else
				echo "<enter_the_first_arg_before_entering_-c>"
			fi
	esac
	exit
}

# Use this function to provide BC suggestions for positional parameters
# see man bg-overviewOutOfBandScriptFunctions for details
function oob_helpMode()
{
	local -A clInput; bgCmdlineParse -RclInput "<cmd>" "$@"
	case ${clInput[cmd]:-main} in
		main)  man "$(basename $0)" ;;
		*)     man "$(basename $0)" ;;
	esac
}










###############################################################################
# Main script

# default values for parameters
verbosity=1
cmd=""
passThruOpts=()
oob_invokeOutOfBandSystem "$@"
while [ $# -gt 0 ]; do case $1 in
	-q|--query)     cmd="query"  ;;
	-s|--summary)   cmd="summary"  ;;
	-g|--get)       cmd="get"  ;;
	-i|--tableInfo) cmd="tableInfo" ;;

	-c*|--columns*)      bgOptionGetOpt opt: passThruOpts "$@" && shift ;;
	-n|--noDirtyCheck)   bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-f|--forceRebuild)   bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-r|--refresh)        bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-e|--escapeOutput)   bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-H|--header)         bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-F*|--tblFormat*)    bgOptionGetOpt opt: passThruOpts "$@" && shift ;;
	-w|--wiki)           bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-p|--plainFilter)    bgOptionGetOpt opt passThruOpts "$@" && shift ;;
	-1|--assertOneValue) bgOptionGetOpt opt passThruOpts "$@" && shift ;;

	*)  bgOptionsEndLoop "$@" && break; set -- "${bgOptionsExpandedOpts[@]}"; esac; shift;
done

awkDataID="$1"; shift

case ${cmd:-query} in
	query)      awkData_query        "${passThruOpts[@]}" "$awkDataID" "$@" ;;
	summary)    awkData_countValues  "${passThruOpts[@]}" "$awkDataID" "$@" ;;
	get)        awkData_getValue     "${passThruOpts[@]}" "$awkDataID" "$@" ;;
	tableInfo)  awkData_tableInfo    "${passThruOpts[@]}" "$awkDataID" "$@" ;;
	*) assertError -v cmd "unknown cmd" ;;
esac
