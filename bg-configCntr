#!/bin/bash

###############################################################################
# Includes and defines

packageName=bg-core

source /usr/lib/bg_core.sh
import Config.PluginType ;$L1;$L2

cmds="list report check apply runAll activate deactivate"

# Command:
# usage: bg-configCntr list|report|check|apply|runAll|activate|deactivate
# A command to manage the Config plugins currently installed on a host.
# Config plugins are units of configuration that can be distributed in deb or rpm packages and then turned on or off on the host.
# The Config plugins installed on a host provide capabilities to the host that lay dormant until they are activated in some way.
# Each Config plugin has a 'check' operation and an 'apply' operation which can be invoked manually with this command. Each Config
# plugin also has an activation state which can be set by this command. When a Config plugin is activated, the bg-complianceEngine
# will invoke it periodically and as needed to either 'monitor' (call 'check' only) or 'enforce' (call 'apply') the configuration.
# Any time either operation is called, the state of the host's compliance with this configuration is recorded. A healthy host would
# have all active Config plugins reporting 100% compliance.

###############################################################################
# Functions

# inspect the command line and if sudo is required set user="root"
# set group="<someGroup" if known. Typically the group should not be hardcoded
# see man bg-overviewOutOfBandScriptFunctions for details
function oob_getRequiredUserAndGroup()
{
	local -A clInput; bgCmdlineParse -RclInput "<glean>" "$@"; shift "${clInput[shiftCount]}"

	local cmd="$1"
	case $cmd in
		# activate)   echo "root" ;;
		# deactivate) echo "root" ;;
		*) echo "" ;;
	esac
}

# Use this function to provide BC suggestions for positional parameters
# see man bg-overviewOutOfBandScriptFunctions for details
function printBashCompletion()
{
	local words cword cur prev optWords posWords posCwords
	parseForBashCompletion --compat2 words cword cur prev optWords posWords posCwords "$@"

	local cmd="${posWords[1]}"
	local pluginID="${posWords[2]}"

	case $cmd:$posCwords in
		*:1) echo "$cmds" ;;

		list:*) echo "--types --short --full --tree --list --grouped --activeConfigs" ;;

		check:*) echo "<ConfigPluginName>"; $Config::list --short ;;
		apply:*) echo "<ConfigPluginName>"; $Config::list --short ;;

		activate:2)   echo "<ConfigPluginName>"; $Config::list --short ;;
		activate:3)   echo "<activationMode> monitor enforce" ;;
		activate:4)   echo "<schedule_man_cronNormSchedule> " ;;

		deactivate:2) echo "<ConfigPluginName>"; $Config::list --short ;;
	esac
	exit
}

function oob_helpMode()
{
	local -A clInput; bgCmdlineParse -RclInput "<cmd>" "$@"
	case ${clInput[cmd]:-main} in
		main) man "${0##*/}" ;;
		*) man static::Config::${clInput[cmd]} ;;
	esac
}


###############################################################################
# Input handling

invokeOutOfBandSystem "$@"
verbosity=1
while [ $# -gt 0 ]; do case $1 in
	*)  bgOptionsEndLoop "$@" && break; set -- "${bgOptionsExpandedOpts[@]}"; esac; shift;
done


###############################################################################
# Main script


cmd="$1"; shift

case ${cmd:-report} in
	list)         $Config::list       "$@" ;;
	report)       $Config::report     "$@" ;;
	activate)     $Config::activate   "$@" ;;
	deactivate)   $Config::deactivate "$@" ;;
	check)        $Config::check      "$@" ;;
	apply)        $Config::apply      "$@" ;;
	runAll)       $Config::runAll     "$@" ;;
	*) assertError "unknown command '$cmd'"
esac
