#!/usr/bin/env bash

###############################################################################
# Includes and defines

packageName=bg-core

source /usr/lib/bg_core.sh
import bg_template.sh ;$L1;$L2
import bg_plugins.sh ;$L1;$L2


supportedCmds="templates plugin cuiWin config manifest compliance"
cmdSyntax="[-v|--verbose] [-q|--quiet] [--verbosity] <cmd>"

###############################################################################
# Command manpage
# usage: bg-core [-q|-v] templates [<subCmdOptions>] [<subCmdArguments>]
# query and manipulate general host settings and resources.
# The bg-core package provides various addons to the base OS distribution.
#
# Sub Commands:
#  * templates : find and list templates installed from various packages
#  * cuiWin    : query and manipulate terminal windows participating in various script UI
#  * dropin    : see status of and enable/disable various dropin configurations
#  * config    : query and set host and domain configuration settings
#  * manifest  : query resources installed by various packages
#  * compliance : manage the plugins that determine the host behavior
#
# See Also:

###############################################################################
# Functions

# this is invoked by oob_invokeOutOfBandSystem when -hb is the first param
# The bash completion script calls this get the list of possible words.
function oob_printBashCompletion()
{
	local -A clInput; bgBCParse -RclInput "$cmdSyntax" "$@"; shift "$((${clInput[shiftCount]}+2))"

	cmd="$1"; shift; ((posCwords--))

	case $cmd:$posCwords in
		*:0) echo $supportedCmds ;;
		templates:1) echo "types list find expand getVars paths" ;;
		templates:*)
			subCmd="$1"; shift; ((posCwords--))
			case $subCmd:$((posCwords)) in
				# all subcmds except 'paths' take a template name as their first parameter
				paths:1) ;;
				*:1) completeTemplateName "$@" ;;

				expand:2) echo "<destination> - /" ;;
				expand:*) completeTemplateVariables --cword="$posCwords" --cur="$cur" "$@" ;;
			esac
			;;

		plugin:1) echo "types list get" ;;
		plugin:*)
			subCmd="$1"; shift; ((posCwords--))
			case $subCmd:$((posCwords)) in
				get:1)
					echo "<pluginKey>"
					$Plugin::list
					;;
			esac
			;;

		config:1) echo "set get remove view" ;;
		config:*)
			subCmd="$1"; shift; ((posCwords--))
			case $subCmd in
				get)    bgBCParse -RclInput "[-s|--scope=<scope>] <section> <setting> [<defaultValue>]" "$posCwords" "$0" "$@" ;;
				set)    bgBCParse -RclInput "[-s|--scope=<scope>] <section> <setting> <value>"          "$posCwords" "$0" "$@" ;;
				remove) bgBCParse -RclInput "[-s|--scope=<scope>] <section> <setting>"                  "$posCwords" "$0" "$@" ;;
				view)   : ;;
			esac
			case $completingArgName in
				'<scope>')   configScopeList ;;
				'<section>') configSectionList ${clInput[-s]:+"-s${clInput[-s]}"}; [ "$subCmd" == "set" ] && echo "."; echo "\$(emptyIsAnOption)" ;;
				'<setting>') configSettingList ${clInput[-s]:+"-s${clInput[-s]}"} "${clInput[section]}"; echo "\$(emptyIsAnOption)" ;;
			esac
			;;
	esac
	exit
}

# Use this function to provide BC suggestions for positional parameters
# see man bg-overviewOutOfBandScriptFunctions for details
function oob_helpMode()
{
	local -A clInput; bgCmdlineParse -RclInput "<cmd>" "$@"
	case ${clInput[cmd]:-main} in
		main)  man "$(basename $0)" ;;
		*)     man "$(basename $0)" ;;
	esac
}








function templateCntr()
{
	local cmd="${1:-list}"; shift
	case ${cmd} in
		types)      templateListTypes     "$@" ;;
		list)       templateListTemplates "$@" ;;
		find)       templateFind          "$@" || assertError "no template found for '$@'" ;;
		expand)     templateExpand        "$@" ;;
		paths)
			echo "These folders will be searched in order to resolve template names. The first folders will reflect the package where "
			echo "templateFind is called from so that code will find the templates provided by the pkg that it is delivered in first"
			echo "A sysadmin can override any template by creating a template with the same name in the first folder."
			templateFind --listPaths
			;;
		getVars)
			if ((verbosity<=1)); then
				templateListVars      "$@"
			else
				templateGetVarTokens  "$@"
			fi
			;;
		*) assertError -v cmd "unknown cmd" ;;
	esac
}

# usage: pluginCntr [<options>] <cmd> <args>
# This function dispatches cmds from the "bg-core plugins..." cmdline.
function pluginCntr()
{
	while [ $# -gt 0 ]; do case $1 in
		*)  bgOptionsEndLoop "$@" && break; set -- "${bgOptionsExpandedOpts[@]}"; esac; shift;
	done
	local cmd="$1"; shift

	case ${cmd:-list} in
		list)   $Plugin::list "$@" ;;
		types)  $Plugin::types "$@" ;;
		get)    $Plugin::get "$@" ;;
		*) assertError "unknown sub command '$cmd'" ;;
	esac
}

function complianceCntr()
{
	import Config.PluginType  ;$L1;$L2
	import Standards.PluginType  ;$L1;$L2

	while [ $# -gt 0 ]; do case $1 in
		*)  bgOptionsEndLoop "$@" && break; set -- "${bgOptionsExpandedOpts[@]}"; esac; shift;
	done
	local cmd="$1"; shift

	case ${cmd:-listIDs} in
		listIDs)
			local -a activeProfiles=()
			static::Config::list       -A activeProfiles --activeConfigs   --full
			static::Standards::list -a -A activeProfiles --activeStandards --full
			local profileID; for profileID in "${activeProfiles[@]}"; do
				local cp; $Plugin::get "$profileID" cp
				creqStartSession  --profileID="$profileID" reportIDs
				$cp.invoke "cmd_run"
				creqEndSession
			done
		;;
		*) assertError "unknown sub command '$cmd'" ;;
	esac
}


###############################################################################
# Command manpage: bg-core-config
# usage: bg-core config get|set|remove|view
# This interface allows manipulating hte system-wide config system. The system wide config behaves similar to an ini-style config
# file except that there is one logical file that is a composite from multiple scopes.
# ... 
function configCntr()
{
	local cmd="$1"; shift

	case ${cmd:-view} in
		get)    configGet    "$@" ;;
		set)    configSet    "$@" ;;
		remove) configRemove "$@" ;;
		view)   configView   "$@" ;;
		*) assertError -v subCmd:cmd "Unknown sub command" ;;
	esac
}

###############################################################################
# Main script

# default values for parameters
command=""
verbosity=1
oob_invokeOutOfBandSystem "$@"
while [ $# -gt 0 ]; do case $1 in
	-v|--verbose) ((verbosity++)) ;;
	-q|--quiet) ((verbosity--)) ;;
	--verbosity*) bgOptionGetOpt val: verbosity "$@" && shift ;;
	*)  bgOptionsEndLoop "$@" && break; set -- "${bgOptionsExpandedOpts[@]}"; esac; shift;
done
command="$1"; shift


case ${command:-show} in
	templates)     templateCntr   "${passThruOpts[@]}" "$@" ;;
	plugin)        pluginCntr     "${passThruOpts[@]}" "$@" ;;
	config)        configCntr     "${passThruOpts[@]}" "$@" ;;
	manifest)      echo "use 'bg-awkData manifest ...' to query the host manifest" ;;
	compliance)    complianceCntr "${passThruOpts[@]}" "$@" ;;
	show)          echo "coming soon..."  ;;
	*)  echo "error: unknown command '$command'. "
		echo "   See man $(basename $0)"
		;;
esac
