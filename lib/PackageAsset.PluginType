#!/bin/bash

import bg_plugins.sh ;$L1;$L2
import bg_install.sh ;$L1;$L2
import bg_manifestScanner.sh ;$L1;$L2

#####################################################################################################
### This module implements a "PackageAsset"  Plugin class

# Library
# A PackageAsset Plugin introduces a new type of asset that can be distributed in software packages. PackageAsset Plugins are used
# on developer hosts to build and maintain software packages. The bg-dev tool will recognize all PackageAsset Plugins installed on
# the host to form the set of available asset types.
#
# Public Interface:
# The public interface of this class is typically only called from the bg-dev cmd.
#    $obj.find    : scan the PWD and subfolders for files that match the asset type and print the results to stdout
#    $obj.install <file1> [... <fileN>]    : install each asset passed in the cmd line to the file system rooted at $DESTDIR
#    $obj.create <name>  : scan the PWD and subfolders for files that match the asset type and print the results to stdout
#
# Writing a PackageAsset Plugin:
# Refer to man(7) bashPlugins for information how how to write plugins in general.
#
# Required Attributes:
# The pluign author must provide these attributes in the DeclarePlugin call.
#    cmd_find    : a command that scans a project folder and identifies any assets of this type contained in the project.
#    cmd_install : a command that installs a particular asset of this type into the target's file system.
#    cmd_addNewAsset  : a command that adds a new asset of this type to a project folder.
#
# Optional Attributes:
#    goal        : a brief description about the asset type it represents. Should be one short line.
#    description : more detailed information about the asset type.
#
# Example:
#     #!/bin/bash
#
#     DeclarePlugin PackageAsset foo "
#     	cmd_find:    bgAssetFind_foo
#     	cmd_install: bgAssetInstall_foo
#     	cmd_addNewAsset:  bgAssetAddNewAsset_foo
#     "
#
#
#     function bgAssetFind_foo() {
#     	_findAssetsOfType --rmSuffix=""          "foo"           -R  -- ./*                       -type f  -name "*.foo"
#     }
#     function bgAssetInstall_foo() {
#     	_installFilesToDst --flat   ""             "/usr/share/foo"            "$@"
#     }
#     function bgAssetAddNewAsset_foo() {
#     	local assetName="$1"
#     	local templateFile; templateFind -R templateFile foo
#     	templateExpand "$templateFile" "./lib/$assetName.foo"
#     }
#
#
# _findAssetsOfType and _installFilesToDst are helper functions provided in the PackageAsset plugin library.
# See man(3) collect<tab><tab> for more information on helper functions.


DeclarePluginType PackageAsset "
	columns: name(-18) cmd_find(-18) cmd_install(-18) cmd_addNewAsset(-18)  goal tags description
	keyCol: name
	requiredCols: cmd_find cmd_install cmd_addNewAsset
	defDisplayCols: name goal
	description: A PackageAsset plugin defines a type of asset that can be distributed via software packages.
	 See man(7) PackageAsset.PluginType
"

#################################################################################################################################
### Static members

# there are no static members of this class yet


#################################################################################################################################
### Non-static members


function PackageAsset::__construct()
{
	:
}

function PackageAsset::find()
{
	$_this.invoke "cmd_find" "$@"
}

function PackageAsset::install()
{
	$_this.invoke "cmd_install" "$@"
}

function PackageAsset::addNewAsset()
{
	$_this.invoke "cmd_addNewAsset" "$@"
}


# usage: addNewAssetFromTemplate <assetType> <assetName> <destFile>
function addNewAssetFromTemplate()
{
	local assetType="$1"; shift; assertNotEmpty assetType
	local newAssetName="$1"; shift; assertNotEmpty newAssetName
	local destFile="$1";     shift; assertNotEmpty destFile

	[ -e "$destFile" ] && assertError "An asset already exists at '$destFile'"

	import bg_template.sh  ;$L1;$L2
	local templateFile; templateFind -R templateFile "newAsset.$assetType"
	[ ! "$templateFile" ] && assertError -v assetType -v assetName -v destFile -v templateName:-l"newAsset.$assetType" -v templateFile "The template to create a new %assetName% asset was not found on this host."

	templateExpand "$templateFile" "$destFile" || assertError
	echo "A new asset has been added at '$destFile' with default values. Edit that file to customize it."
}
