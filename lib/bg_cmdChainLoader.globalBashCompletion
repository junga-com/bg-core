
# MAN(7.bashLibrary) bg_cmdChainLoader.globalBashCompletion
# This bash completion script library is intended to be placed in the /etc/bash_completion.d/ folder where it will be auto loaded
# into every user's bash sessions. It inserts an additional default completion loader function to load the completion spec for cmds
# on demand. If chains itself with the previous default handler so that it gets a chance to recognize and load the completion handler
# for cmds it recognizes and then passes through to the previous default behavior if it does not.
#
# If the cmd contains the string "invokeOutOfBandSystem" then it is assumed that it supports the protocol defined by the
# man(3) _bgbc-complete-viaCmdDelegation function and this loader will set its completion configuration. If the cmd is a binary file,
# the strings utility is used to extract the strings to check. If its a text script it is greped directly.
#
# See Also:
#    man(3) _bgbc-complete-viaCmdDelegation

function _bg_subclassed_completionLoader() {
	local cmd="$1"

	# The original way to identify compatible scripts was to look up in the manifests of bg-dev managed packages but that is problematic
	# in two ways. We may miss commands that would work just because they were not packaged in that way, and also, a bg-dev package
	# should be free to provide commands that are not compatible with this.
	#
	# Scripts are easy to identify because they are text files that contain oob_invokeOutOfBandSystem. We can extend that notion
	# to binary files by requiring them to include a string constant containing oob_invokeOutOfBandSystem so that the strings util
	# will print it

	local isOneOfOurs
	local cmdType="$(type -t "$cmd")"
	if [[ "$cmd" =~ [.]ut$ ]]; then
		isOneOfOurs="1"
	elif [ "$cmdType" == "file" ] && strings "$(which $cmd)" | grep -q invokeOutOfBandSystem &>/dev/null; then
		isOneOfOurs="1"
	elif [ "$cmdType" == "function" ] && type $cmd | grep -q -E "(invokeOutOfBandSystem|hbOOBCompGen)" &>/dev/null; then
		isOneOfOurs="1"
	fi

	if [ "$isOneOfOurs" ]; then
		# register our generic handler which invokes the command with the -hb syntax to ask it to provide the completion list
		complete -F _bgbc-complete-viaCmdDelegation "$cmd" && return 124
		# returning 124 tells bash to restart running specs for this cmd since we changed the completion specs

	else
		# the cmd is not one of ours so apply the default specs that we replaced which is probably the default loader
		complete $_bg_subclassed_completionLoader_prevLoader $cmd && return 124
		# returning 124 tells bash to restart running specs for this cmd since we changed the completion specs
	fi
}

# in case we get reloaded, this block only runs the when the _bg_subclassed_completionLoader has not yet been installed (typically the first time)
if [[ ! "$(complete -D -p)" =~ _bg_subclassed_completionLoader  ]]; then
	# save the previous default loader spec, removing the -D b/c we will apply it to a specific cmd when we have to use it
	# we also remove the leading 'complete ' so that when we execute it we cant be tricked into running an unknown command
	_bg_subclassed_completionLoader_prevLoader="$(complete -D -p)"
	_bg_subclassed_completionLoader_prevLoader="${_bg_subclassed_completionLoader_prevLoader//-D}"
	_bg_subclassed_completionLoader_prevLoader="${_bg_subclassed_completionLoader_prevLoader#complete }"

	# overwrite the default loader with our function
	complete -D -F _bg_subclassed_completionLoader
fi
