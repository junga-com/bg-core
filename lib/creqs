#!/bin/bash


###############################################################################
# Includes and defines

projectName=bg-lib

source /usr/lib/bg_common.sh
#source $(findInclude bg_lib.sh)


###############################################################################
# Functions

# inspect the command line and if sudo is required set user="root"
# set group="<someGroup" if known. Typically the group should not be hardcoded
# see man bg-overviewOutOfBandScriptFunctions for details
function oob_getRequiredUserAndGroup()
{
	local words cword cur prev optWords posWords posCwords reqUser="" reqGroup=""
	parseForBashCompletion --compat2 words cword cur prev optWords posWords posCwords "$@"
	if [ "${posWords[1]}" == "apply" ] || [[ "${optWords[@]}" =~ -s ]]; then
		reqUser="root"
	fi
	echo "$reqUser:$reqGroup"
}

# Use this function to provide BC suggestions for positional parameters  
# see man bg-overviewOutOfBandScriptFunctions for details
function printBashCompletion()
{
	local words cword cur prev optWords posWords posCwords
	parseForBashCompletion --compat2 words cword cur prev optWords posWords posCwords "$@"

	case $posCwords in
		1) 	echo "apply check" ;;

		2) 	echo "> <cr_statement> "
			manpath="$( manpath 2>/dev/null || command man --path ):"
			manpath="${manpath//://man3/cr_* }"
			COMPREPLY=($( eval command ls "$manpath" 2>/dev/null ));
			COMPREPLY=(${COMPREPLY[@]##*/});
			COMPREPLY=(${COMPREPLY[@]%%.*});
			echo "${COMPREPLY[@]}"
			;;
			
		*)	crStatementType="${posWords[2]}"
			usageSyntax=($(man $crStatementType 2>/dev/null | awk '/^SYNOPSIS/ {inSect=1; next}; /^[^[:space:]]/ {inSect=0}; inSect &&  /^[[:space:]]*'"$crStatementType"'/ {print}'))
			usagePos1=1; while [[ "${usageSyntax[$usagePos1]}" =~ ^[[-] ]]; do ((usagePos1++)); done
			curUsagePos=$(( posCwords + usagePos1 -3 ))
			echo "> ${usageSyntax[$curUsagePos]}"
			;;
	esac
	exit
}

# Use this function to provide the BC suggestions for (-?) options that require parameters
# see man bg-overviewOutOfBandScriptFunctions for details
function oob_printOptBashCompletion()
{
	local opt="$1"
	local cur="$2"
#	case $opt in
#		x) echo "options for x:"
#	esac
}



###############################################################################
# Input handling

# default values for parameters
myXOption="default"

# Handle the command line options as defined by the "getopts" unix/linux standard.
# Specify the supported options in the optSpecs. 'x:' requires and argument. 
optSpecs="hvs"
invokeOutOfBandSystem "$@"
while getopts "$optSpecs" flag; do case $flag in
	h) man $(basename $0); exit  ;;
	#x) myXOption=$OPTARG; ;;
	s) : ;;
	v) ((verbosity++)); verbosityFlags+=" -v" ;;
	?) echo "unrecognized option. see man $(basename $0)"; exit  ;;
esac; done; shift $((OPTIND-1)); unset OPTIND


###############################################################################
# Main script

if [[ "$1" =~ (apply)|(check) ]]; then
	creqMode="$1"
	creqWriteModeEnabled="1"
	shift
fi

if [ ! "$(creqGetState)" ]; then
	creqInit ${creqMode:-check} $verbosity
fi

# load any required import libraries. We use its generated man page documentation to get the import(s) 
crStatementType="$1"
importFiles=$(man $crStatementType 2>/dev/null | awk '/^SYNOPSIS/ {inSect=1; next}; /^[^[:space:]]/ {inSect=0}; inSect &&  /^[[:space:]]*import/ {print $2}')
for importFile in $importFiles; do
	import "$importFile" ;$L1;$L2
done

[ "$(type -t $crStatementType)" == "function" ] || assertError -v crStatementType -v importFiles "the cr statement type was not found"

"$@"

creqReport	
