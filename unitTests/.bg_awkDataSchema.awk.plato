
###############################################################################################################################
## bg_awkDataSchema.awk:awkData_parseID: start
## expect: 

##----------
## setup
##     | ut filter '(gawk: fatal: cannot open file ... <redacted>
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> ls -1 "$utDataFolder/"
##     | bar.schema
##     | foo.data
##     | manifest
##     | type1.awkDataSchema
##     | type1.cache

##----------
## test

# expect that the long form ID is completely filled in from the manifest
cmd> awkDataID="type1"
cmd> awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'
long form = type1|/tmp/tmp.<redacted>/type1.cache|/tmp/tmp.<redacted>/type1.awkDataSchema

##----------
## test

# expect empty file parts because type2 does ot exist in the manifest
cmd> awkDataID="type2"
cmd> awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'
long form = type2||

##----------
## test

# expect the data one-off data file with no schema
cmd> awkDataID="$utDataFolder/foo.data"
cmd> awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'
long form = foo|/tmp/tmp.<redacted>/foo.data|

##----------
## test

# expect the one-off data file does not need to exist
cmd> awkDataID="$utDataFolder/type2.data"
cmd> awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'
long form = type2|/tmp/tmp.<redacted>/type2.data|

##----------
## test

# expect the one-off data file with the same base name as an installed awkObjName will use its schema
cmd> awkDataID="$utDataFolder/type1.myData"
cmd> awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'
long form = type1|/tmp/tmp.<redacted>/type1.myData|/tmp/tmp.<redacted>/type1.awkDataSchema

##----------
## test

# expect an exception because the specified schema file does not exit
cmd> awkDataID="$utDataFolder/type2.schema"
cmd> awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'
stderr> gawk: fatal: cannot open file ... <redacted>
stderr> awk assert error () : Neither the awk schema file nor the awkDataID specify the awkFile path. awkDataID=||/tmp/tmp.<redacted>/type2.schema
stderr>    inputFile=  : BEGIN
stderr>    input line= 'N/A'
stderr> 
stderr> 

##----------
## test
[exitCode 222]

# expect specify an existing schema file but the data file does not yet exit
cmd> awkDataID="$utDataFolder/bar.schema"
cmd> awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'
long form = bar|/tmp/tmp.<redacted>/bar.cache|/tmp/tmp.<redacted>/bar.schema

##----------
## test

# expect we can use an existing awkObjName schema with a totally new data file name
cmd> awkDataID="|$utDataFolder/bar.schema|type1"
cmd> awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'
long form = bar|/tmp/tmp.<redacted>/bar.schema|/tmp/tmp.<redacted>/type1.awkDataSchema

## bg_awkDataSchema.awk:awkData_parseID: finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:schema_restore:installedSchema start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> awkDataID="${1//<utDataFolder>/$utDataFolder}"
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema

##----------
## test
awkDataID=type1
cmd> awk  -v awkDataID="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {PROCINFO["sorted_in"]="@ind_str_asc";  printfVars("-o/dev/stdout schemas awkDataID")}'
schemas=<array>
   type1=<array>
      [_CLASS              ]='schema'
      [_OID                ]='type1'
      [awkDataID           ]='type1'
      [awkDomFolder        ]=''
      [awkFile             ]='/tmp/tmp.<redacted>/type1.cache'
      [awkObjName          ]='type1'
      [awkSchemaFile       ]='/tmp/tmp.<redacted>/type1.awkDataSchema'
      [colNF               ]='3'
      [dependents          ]=''
      [depsRoot            ]=''
      [keyCol              ]=''
      anyKeyCols=<array>
      associatedSecKeys=<array>
      associatedSecKeysSet=<array>
      colFields=<array>
         [_CLASS]='NFieldMap'
         [any   ]='0'
         [one   ]='1'
         [three ]='3'
         [two   ]='2'
      colNames=<array>
         [1]='one'
         [2]='two'
         [3]='three'
      colTypes=<array>
         [1]=''
         [2]=''
         [3]=''
      colWidths=<array>
         [1]='10'
         [2]='5'
         [3]='13'
      colWithWidths=<array>
         [1]='one(10)'
         [2]='two(5)'
         [3]='three(13)'
      conflictKeys=<array>
      data=<array>
      info=<array>
         [0                ]='type1'
         [_CLASS           ]='schemaInfo'
         [_OID             ]='type1'
         [anyKeyCols       ]=' '
         [awkDataID        ]='type1'
         [awkDomFolder     ]=''
         [awkFile          ]='/tmp/tmp.<redacted>/type1.cache'
         [awkObjName       ]='type1'
         [awkSchemaFile    ]='/tmp/tmp.<redacted>/type1.awkDataSchema'
         [colNames         ]='one two three'
         [colWidths        ]='10 5 13'
         [colWithWidths    ]='one(10) two(5) three(13)'
         [columns          ]='one(10) two(5) three(13)'
         [columnsWithWidths]='one(10) two(5) three(13)'
         [defDisplayCols   ]='all'
         [dependents       ]=''
         [depsRoot         ]=''
         [fmtStr           ]='%10s %5s %13s'
         [keyCol           ]=''
         [schemaType       ]='independent'
         [secondaryKeyCols ]=''
      keyCols=<array>
      normKey=<array>
      secondaryKeyCols=<array>
awkDataID='type1'

## bg_awkDataSchema.awk:schema_restore:installedSchema finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:schema_restore:oneOffSchemaFile start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> awkDataID="${1//<utDataFolder>/$utDataFolder}"
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema

##----------
## test
awkDataID=/tmp/tmp.<redacted>/bar.schema
cmd> awk  -v awkDataID="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {PROCINFO["sorted_in"]="@ind_str_asc";  printfVars("-o/dev/stdout schemas awkDataID")}'
schemas=<array>
   bar=<array>
      [_CLASS              ]='schema'
      [_OID                ]='bar'
      [awkDataID           ]='bar'
      [awkDomFolder        ]=''
      [awkFile             ]='/tmp/tmp.<redacted>/bar.cache'
      [awkObjName          ]='bar'
      [awkSchemaFile       ]='/tmp/tmp.<redacted>/bar.schema'
      [colNF               ]='3'
      [dependents          ]=''
      [depsRoot            ]=''
      [keyCol              ]=''
      anyKeyCols=<array>
      associatedSecKeys=<array>
      associatedSecKeysSet=<array>
      colFields=<array>
         [_CLASS]='NFieldMap'
         [any   ]='0'
         [one   ]='1'
         [three ]='3'
         [two   ]='2'
      colNames=<array>
         [1]='one'
         [2]='two'
         [3]='three'
      colTypes=<array>
         [1]=''
         [2]=''
         [3]=''
      colWidths=<array>
         [1]='10'
         [2]='5'
         [3]='13'
      colWithWidths=<array>
         [1]='one(10)'
         [2]='two(5)'
         [3]='three(13)'
      conflictKeys=<array>
      data=<array>
      info=<array>
         [0                ]='/tmp/tmp.<redacted>/bar.schema'
         [_CLASS           ]='schemaInfo'
         [_OID             ]='bar'
         [anyKeyCols       ]=' '
         [awkDataID        ]='bar'
         [awkDomFolder     ]=''
         [awkFile          ]='/tmp/tmp.<redacted>/bar.cache'
         [awkObjName       ]='bar'
         [awkSchemaFile    ]='/tmp/tmp.<redacted>/bar.schema'
         [colNames         ]='one two three'
         [colWidths        ]='10 5 13'
         [colWithWidths    ]='one(10) two(5) three(13)'
         [columns          ]='one(10) two(5) three(13)'
         [columnsWithWidths]='one(10) two(5) three(13)'
         [defDisplayCols   ]='all'
         [dependents       ]=''
         [depsRoot         ]=''
         [fmtStr           ]='%10s %5s %13s'
         [keyCol           ]=''
         [schemaType       ]='independent'
         [secondaryKeyCols ]=''
      keyCols=<array>
      normKey=<array>
      secondaryKeyCols=<array>
awkDataID='bar'

## bg_awkDataSchema.awk:schema_restore:oneOffSchemaFile finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:schema_restore:oneOffDataFile start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> awkDataID="${1//<utDataFolder>/$utDataFolder}"
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema

##----------
## test
awkDataID=/tmp/tmp.<redacted>/foo.data
cmd> awk  -v awkDataID="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {PROCINFO["sorted_in"]="@ind_str_asc";  printfVars("-o/dev/stdout schemas awkDataID")}'
schemas=<array>
   foo=<array>
      [_CLASS              ]='schema'
      [_OID                ]='foo'
      [awkDataID           ]='foo'
      [awkDomFolder        ]=''
      [awkFile             ]='/tmp/tmp.<redacted>/foo.data'
      [awkObjName          ]='foo'
      [awkSchemaFile       ]=''
      [colNF               ]='3'
      [dependents          ]=''
      [depsRoot            ]=''
      [keyCol              ]=''
      anyKeyCols=<array>
      associatedSecKeys=<array>
      associatedSecKeysSet=<array>
      colFields=<array>
         [_CLASS     ]='NFieldMap'
         [any        ]='0'
         [manufacture]='1'
         [model      ]='2'
         [serial     ]='3'
      colNames=<array>
         [1]='manufacture'
         [2]='model'
         [3]='serial'
      colTypes=<array>
         [1]=''
         [2]=''
         [3]=''
      colWidths=<array>
         [1]='-13'
         [2]='-6'
         [3]='-6'
      colWithWidths=<array>
         [1]='manufacture(-13)'
         [2]='model(-6)'
         [3]='serial(-6)'
      conflictKeys=<array>
      data=<array>
      info=<array>
         [0                ]='/tmp/tmp.<redacted>/foo.data'
         [_CLASS           ]='schemaInfo'
         [_OID             ]='foo'
         [anyKeyCols       ]=' '
         [awkDataID        ]='foo'
         [awkDomFolder     ]=''
         [awkFile          ]='/tmp/tmp.<redacted>/foo.data'
         [awkObjName       ]='foo'
         [awkSchemaFile    ]=''
         [cacheFileRead    ]='yes'
         [colNames         ]='manufacture model serial'
         [colWidths        ]='-13 -6 -6'
         [colWithWidths    ]='manufacture(-13) model(-6) serial(-6)'
         [columns          ]='manufacture  model serial'
         [columnsWithWidths]='manufacture(-13) model(-6) serial(-6)'
         [defDisplayCols   ]='all'
         [dependents       ]=''
         [depsRoot         ]=''
         [fmtStr           ]='%-13s %-6s %-6s'
         [keyCol           ]=''
         [schemaType       ]='independent'
         [secondaryKeyCols ]=''
      keyCols=<array>
      normKey=<array>
      secondaryKeyCols=<array>
awkDataID='foo'

## bg_awkDataSchema.awk:schema_restore:oneOffDataFile finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:empty start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"

cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
compiledExpr=<array>
   [type]='true'

## bg_awkDataSchema.awk:expr_compile:empty finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:andTerms start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"
one:blue two:2
cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
compiledExpr=<array>
   [type ]='andGroup'
   terms=<array>
      1=<array>
         [field]='1'
         [name ]='one'
         [op   ]='=='
         [type ]='operatorExpression'
         [value]='blue'
      2=<array>
         [field]='2'
         [name ]='two'
         [op   ]='=='
         [type ]='operatorExpression'
         [value]='2'

## bg_awkDataSchema.awk:expr_compile:andTerms finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:orTerms start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"
one,two:blue
cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
compiledExpr=<array>
   [type ]='orGroup'
   terms=<array>
      1=<array>
         [field]='1'
         [name ]='one'
         [op   ]='=='
         [type ]='operatorExpression'
         [value]='blue'
      2=<array>
         [field]='2'
         [name ]='two'
         [op   ]='=='
         [type ]='operatorExpression'
         [value]='blue'

## bg_awkDataSchema.awk:expr_compile:orTerms finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:anyTerms start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"
any:blue
cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
compiledExpr=<array>
   [type ]='orGroup'
   terms=<array>
      1=<array>
         [field]='1'
         [name ]='one'
         [op   ]='=='
         [type ]='operatorExpression'
         [value]='blue'
      2=<array>
         [field]='2'
         [name ]='two'
         [op   ]='=='
         [type ]='operatorExpression'
         [value]='blue'
      3=<array>
         [field]='3'
         [name ]='three'
         [op   ]='=='
         [type ]='operatorExpression'
         [value]='blue'

## bg_awkDataSchema.awk:expr_compile:anyTerms finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:eqOp start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"
one:red one:=red one=red one==red
cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
compiledExpr=<array>
   [type ]='andGroup'
   terms=<array>
      1=<array>
         [field]='1'
         [name ]='one'
         [op   ]='=='
         [type ]='operatorExpression'
         [value]='red'
      2=<array>
         [field]='1'
         [name ]='one'
         [op   ]='=='
         [type ]='operatorExpression'
         [value]='red'
      3=<array>
         [field]='1'
         [name ]='one'
         [op   ]='=='
         [type ]='operatorExpression'
         [value]='red'
      4=<array>
         [field]='1'
         [name ]='one'
         [op   ]='=='
         [type ]='operatorExpression'
         [value]='red'

## bg_awkDataSchema.awk:expr_compile:eqOp finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:neOp start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"
one:!red one!red one:<>red one<>red
cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
compiledExpr=<array>
   [type ]='andGroup'
   terms=<array>
      1=<array>
         [field]='1'
         [name ]='one'
         [op   ]='!='
         [type ]='operatorExpression'
         [value]='red'
      2=<array>
         [field]='1'
         [name ]='one'
         [op   ]='!='
         [type ]='operatorExpression'
         [value]='red'
      3=<array>
         [field]='1'
         [name ]='one'
         [op   ]='!='
         [type ]='operatorExpression'
         [value]='red'
      4=<array>
         [field]='1'
         [name ]='one'
         [op   ]='!='
         [type ]='operatorExpression'
         [value]='red'

## bg_awkDataSchema.awk:expr_compile:neOp finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:reOp start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"
one:~red one~red
cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
compiledExpr=<array>
   [type ]='andGroup'
   terms=<array>
      1=<array>
         [field]='1'
         [name ]='one'
         [op   ]='~'
         [type ]='operatorExpression'
         [value]='red'
      2=<array>
         [field]='1'
         [name ]='one'
         [op   ]='~'
         [type ]='operatorExpression'
         [value]='red'

## bg_awkDataSchema.awk:expr_compile:reOp finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:nreOp start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"
one:!~red one!~red
cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
compiledExpr=<array>
   [type ]='andGroup'
   terms=<array>
      1=<array>
         [field]='1'
         [name ]='one'
         [op   ]='!~'
         [type ]='operatorExpression'
         [value]='red'
      2=<array>
         [field]='1'
         [name ]='one'
         [op   ]='!~'
         [type ]='operatorExpression'
         [value]='red'

## bg_awkDataSchema.awk:expr_compile:nreOp finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:ltOp start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"
one<red one:<red
cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
compiledExpr=<array>
   [type ]='andGroup'
   terms=<array>
      1=<array>
         [field]='1'
         [name ]='one'
         [op   ]='<'
         [type ]='operatorExpression'
         [value]='red'
      2=<array>
         [field]='1'
         [name ]='one'
         [op   ]='<'
         [type ]='operatorExpression'
         [value]='red'

## bg_awkDataSchema.awk:expr_compile:ltOp finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:leOp start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"
one<=red one:<=red
cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
compiledExpr=<array>
   [type ]='andGroup'
   terms=<array>
      1=<array>
         [field]='1'
         [name ]='one'
         [op   ]='<='
         [type ]='operatorExpression'
         [value]='red'
      2=<array>
         [field]='1'
         [name ]='one'
         [op   ]='<='
         [type ]='operatorExpression'
         [value]='red'

## bg_awkDataSchema.awk:expr_compile:leOp finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:gtOp start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"
one>red one:>red
cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
compiledExpr=<array>
   [type ]='andGroup'
   terms=<array>
      1=<array>
         [field]='1'
         [name ]='one'
         [op   ]='>'
         [type ]='operatorExpression'
         [value]='red'
      2=<array>
         [field]='1'
         [name ]='one'
         [op   ]='>'
         [type ]='operatorExpression'
         [value]='red'

## bg_awkDataSchema.awk:expr_compile:gtOp finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:geOp start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"
one>=red one:>=red
cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
compiledExpr=<array>
   [type ]='andGroup'
   terms=<array>
      1=<array>
         [field]='1'
         [name ]='one'
         [op   ]='>='
         [type ]='operatorExpression'
         [value]='red'
      2=<array>
         [field]='1'
         [name ]='one'
         [op   ]='>='
         [type ]='operatorExpression'
         [value]='red'

## bg_awkDataSchema.awk:expr_compile:geOp finished
###############################################################################################################################


###############################################################################################################################
## bg_awkDataSchema.awk:expr_compile:invalidOp start
## expect: 

##----------
## setup
##     | cmd> makeTestData
##     | cmd> export bgVinstalledManifest="$utDataFolder/manifest"
##     | cmd> cat "$bgVinstalledManifest"
##     | ut awkDataSchema type1 /tmp/tmp.<redacted>/type1.awkDataSchema
##     | cmd> '
##     | cmd> echo "$awkScript"
##     | 
##     | 		@include "bg_awkDataSchema.awk"
##     | 		BEGIN {
##     | 			PROCINFO["sorted_in"]="@ind_str_asc";
##     | 			arrayCreate(compiledExpr);
##     | 			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
##     | 			printfVars("-o/dev/stdout compiledExpr");
##     | 		}
##     | 	

##----------
## test
cmd> echo "$1"
one!>=red
cmd> awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
stderr> awk assert error () : expr_compile: unknown operator '!>='
stderr>    inputFile=  : BEGIN
stderr>    input line= 'N/A'
stderr> 
stderr> 
[exitCode 222]

## bg_awkDataSchema.awk:expr_compile:invalidOp finished
###############################################################################################################################

