
###############################################################################################################################
## bg_coreBashVars.sh:varOutput:oneValue start
## expect: 

##----------
## setup
##     | cmd> local strVar="initial value"
##     | cmd> local -a arrayVar=(initial value)
##     | cmd> local -A setVar=([initial]="" [value]="")
##     | cmd> echo "'$1' '$2' '$3' '$4'"
##     | 'one two three' '' '' ''

##----------
## test
cmd> varOutput "$@"
one two three
cmd> varOutput -1 "$@"
one two three
cmd> varOutput +1 "$@"
one two three
cmd> varOutput -d'|' "$@"
one two three

##----------
## test
cmd> varOutput -a -RstrVar   "$@"; printfVars strVar
strVar='initial value one two three'
cmd> varOutput -a -1 -RstrVar   "$@"; printfVars strVar
strVar='initial value one two three
       +one two three'
cmd> varOutput -a +1 -RstrVar   "$@"; printfVars strVar
strVar='initial value one two three
       +one two three one two three'
cmd> varOutput -RstrVar   "$@"; printfVars strVar
strVar='one two three'
cmd> varOutput -1 -RstrVar   "$@"; printfVars strVar
strVar='one two three'
cmd> varOutput +1 -RstrVar   "$@"; printfVars strVar
strVar='one two three'

##----------
## test
cmd> varOutput -a -AarrayVar "$@"; printfVars arrayVar
arrayVar[]
   [0]='initial'
   [1]='value'
   [2]='one two three'
cmd> varOutput -AarrayVar "$@"; printfVars arrayVar
arrayVar[]
   [0]='one two three'

##----------
## test
cmd> varOutput -a -SsetVar   "$@"; printfVars setVar
setVar[]
   [initial      ]=''
   [one two three]=''
   [value        ]=''
cmd> varOutput -SsetVar   "$@"; printfVars setVar
setVar[]
   [one two three]=''

## bg_coreBashVars.sh:varOutput:oneValue finished
###############################################################################################################################


###############################################################################################################################
## bg_coreBashVars.sh:varOutput:multipleValues start
## expect: 

##----------
## setup
##     | cmd> local strVar="initial value"
##     | cmd> local -a arrayVar=(initial value)
##     | cmd> local -A setVar=([initial]="" [value]="")
##     | cmd> echo "'$1' '$2' '$3' '$4'"
##     | 'one' 'two' 'three' ''

##----------
## test
cmd> varOutput "$@"
one two three
cmd> varOutput -1 "$@"
one
two
three
cmd> varOutput +1 "$@"
one two three
cmd> varOutput -d'|' "$@"
one|two|three

##----------
## test
cmd> varOutput -a -RstrVar   "$@"; printfVars strVar
strVar='initial value one two three'
cmd> varOutput -a -1 -RstrVar   "$@"; printfVars strVar
strVar='initial value one two three
       +one
       +two
       +three'
cmd> varOutput -a +1 -RstrVar   "$@"; printfVars strVar
strVar='initial value one two three
       +one
       +two
       +three one two three'
cmd> varOutput -RstrVar   "$@"; printfVars strVar
strVar='one two three'
cmd> varOutput -1 -RstrVar   "$@"; printfVars strVar
strVar='one
       +two
       +three'
cmd> varOutput +1 -RstrVar   "$@"; printfVars strVar
strVar='one two three'

##----------
## test
cmd> varOutput -a -AarrayVar "$@"; printfVars arrayVar
arrayVar[]
   [0]='initial'
   [1]='value'
   [2]='one'
   [3]='two'
   [4]='three'
cmd> varOutput -AarrayVar "$@"; printfVars arrayVar
arrayVar[]
   [0]='one'
   [1]='two'
   [2]='three'

##----------
## test
cmd> varOutput -a -SsetVar   "$@"; printfVars setVar
setVar[]
   [initial]=''
   [one    ]=''
   [three  ]=''
   [two    ]=''
   [value  ]=''
cmd> varOutput -SsetVar   "$@"; printfVars setVar
setVar[]
   [one  ]=''
   [three]=''
   [two  ]=''

## bg_coreBashVars.sh:varOutput:multipleValues finished
###############################################################################################################################


###############################################################################################################################
## bg_coreBashVars.sh:varGetAttributes: start
## expect: 

##----------
## test
cmd> local -A bar;      varGetAttributes bar  # returns 'A'
A
cmd> local -n goo;      varGetAttributes goo  # 'n@' (unitialized nameref)
n@
cmd> goo=bar;           varGetAttributes goo  # 'nA' (nameref to an associative Array)
nA
cmd> local -n goo2;
cmd> goo2=noExists;     varGetAttributes goo2 # 'n'  (nameref to non-existent variable)
n
cmd> unset bar;         varGetAttributes goo  # 'n'  (nameref to non-existent variable)
n-
cmd> bar=5;             varGetAttributes goo  # 'n-' (nameref to variable with no attrbutes)
n-
cmd> local -n goo3=goo; varGetAttributes goo3 # 'nn-' (nameref a nameref to variable with no attrbutes)
nn-
cmd> local -i i;        varGetAttributes i
i
cmd> local    a1;       varGetAttributes a1
-
cmd> local a2=();       varGetAttributes a2
a
cmd> local -a a3;       varGetAttributes a3
a
cmd> local -arix a4;    varGetAttributes a4
airx
cmd> local    A1;       varGetAttributes A1
-
cmd> local -A A2;       varGetAttributes A2
A
cmd> local -Arix A3;    varGetAttributes A3
Airx
cmd> local -x ary=(one two three); varGetAttributes ary[1]
x
cmd> varGetAttributes ary[5]

cmd> local -A map=([one]=1 [two]=2 [three]=3)
cmd> varGetAttributes map[two]
-
cmd> varGetAttributes map[5]

cmd> varGetAttributes map[@]
-
cmd> varGetAttributes map[*]
-
cmd> local -rA map2=([one]=1 [two]=2 [three]=3)
cmd> varGetAttributes map2
Ar
cmd> varGetAttributes map2[two]
r
cmd> varGetAttributes map2[5]


## bg_coreBashVars.sh:varGetAttributes: finished
###############################################################################################################################

