
###############################################################################################################################
## bg_debugStack.sh:bgStackFind:0 start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects '', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind  = [0]=a1

## bg_debugStack.sh:bgStackFind:0 finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:1 start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "1" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects '1', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind 1 = [1]=b2

## bg_debugStack.sh:bgStackFind:1 finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:2 start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "2" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects '2', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind 2 = [2]=c3

## bg_debugStack.sh:bgStackFind:2 finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:3 start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "3" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects '3', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind 3 = [3]=d4

## bg_debugStack.sh:bgStackFind:3 finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:tooHigh start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "40" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects '40', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind 40 = [-1]=<main>

## bg_debugStack.sh:bgStackFind:tooHigh finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:tooLow start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "-- -40" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects '-- -40', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind --
-40 = [0]=a1

## bg_debugStack.sh:bgStackFind:tooLow finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:byName start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "c3" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects 'c3', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind c3 = [2]=c3

## bg_debugStack.sh:bgStackFind:byName finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:byNameAndOffset start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "c3:1" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects 'c3:1', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind c3:1 = [3]=d4

## bg_debugStack.sh:bgStackFind:byNameAndOffset finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:byNameAndOffsetPlus start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "c3:+1" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects 'c3:+1', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind c3:+1 = [3]=d4

## bg_debugStack.sh:bgStackFind:byNameAndOffsetPlus finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:byNameAndTooLow start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "c3:-100" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects 'c3:-100', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind c3:-100 = [0]=a1

## bg_debugStack.sh:bgStackFind:byNameAndTooLow finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:byNameAndEmpty start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "c3:" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects 'c3:', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind c3: = [2]=c3

## bg_debugStack.sh:bgStackFind:byNameAndEmpty finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:byNameAndOffsetNeg start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "c3:-1" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects 'c3:-1', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind c3:-1 = [1]=b2

## bg_debugStack.sh:bgStackFind:byNameAndOffsetNeg finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:byNameReg start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "c.*" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects 'c.*', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind c.* = [2]=c3

## bg_debugStack.sh:bgStackFind:byNameReg finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:byNameRegOffset start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "c.*:1" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects 'c.*:1', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind c.*:1 = [3]=d4

## bg_debugStack.sh:bgStackFind:byNameRegOffset finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:byNameNotFound start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind "somethingNotOnStack" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects 'somethingNotOnStack', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind somethingNotOnStack = []=a1

## bg_debugStack.sh:bgStackFind:byNameNotFound finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind:byNameAny start
## expect: 

##----------
## setup
##     | cmd> }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local level;
##     |     bgStackFind "$@" level;
##     |     local funcname=("${FUNCNAME[@]:0:5}" "<main>");
##     |     printfVars --prefix="# " FUNCNAME:funcname --prefix="" -l"bgStackFind ".*" = [$level]="${funcname[$level]}
##     | }

##----------
## test

# expect that the identified frame reflects '.*', the argument passed to bgStackFind
cmd> d4 "$@"
# FUNCNAME[]
#         [0]='a1'
#         [1]='b2'
#         [2]='c3'
#         [3]='d4'
#         [4]='ut_bgStackFind'
#         [5]='<main>'
bgStackFind .* = [8]=

## bg_debugStack.sh:bgStackFind:byNameAny finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackFind2: start
## expect: 

##----------
## setup
##     | cmd> function assertA1() { bgStackFind "assert.*" level; fname="${FUNCNAME[$level]}" ; printfVars fname; } ; :
##     | cmd> function assertB2() { assertA1 "$@"; }          ; :
##     | cmd> function assertC3() { assertB2 "$@"; }          ; :
##     | cmd> function d4() { assertC3 "$@"; }          ; :
##     | cmd> type assertA1
##     | assertA1 is a function
##     | assertA1 () 
##     | { 
##     |     bgStackFind "assert.*" level;
##     |     fname="${FUNCNAME[$level]}";
##     |     printfVars fname
##     | }

##----------
## test

# expect that fname is assertC3 which is the last consequetive assert* function on the stack
cmd> d4 "$@"
fname='assertC3'

## bg_debugStack.sh:bgStackFind2: finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackGetFrame:default start
## expect: 

##----------
## setup
##     | cmd> eval 'function a1() { local -A frame; bgStackGetFrame "$@" frame; printfVars frame; }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local -A frame;
##     |     bgStackGetFrame "$@" frame;
##     |     printfVars frame
##     | }

##----------
## test

# expect that the frame printed reflects '', the argument passed to bgStackGetFrame
cmd> d4 "$@"
frame[]
     [printLine  ]='bg_debugStack.sh.ut:(68): a1(): bgStackGetFrame  frame'
     [simpleCmd  ]='bgStackGetFrame  frame'
     [srcLineNo  ]='68'
     [function   ]='a1'
     [srcLocation]='bg_debugStack.sh.ut:(68)'
     [srcFile    ]='/home/bobg/github/bg-AtomPluginSandbox/bg-core/unitTests/bg_debugStack.sh.ut'

## bg_debugStack.sh:bgStackGetFrame:default finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackGetFrame:0 start
## expect: 

##----------
## setup
##     | cmd> eval 'function a1() { local -A frame; bgStackGetFrame "$@" frame; printfVars frame; }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local -A frame;
##     |     bgStackGetFrame "$@" frame;
##     |     printfVars frame
##     | }

##----------
## test

# expect that the frame printed reflects '0', the argument passed to bgStackGetFrame
cmd> d4 "$@"
frame[]
     [printLine  ]='bg_debugStack.sh.ut:(68): a1(): bgStackGetFrame 0 frame'
     [simpleCmd  ]='bgStackGetFrame 0 frame'
     [srcLineNo  ]='68'
     [function   ]='a1'
     [srcLocation]='bg_debugStack.sh.ut:(68)'
     [srcFile    ]='/home/bobg/github/bg-AtomPluginSandbox/bg-core/unitTests/bg_debugStack.sh.ut'

## bg_debugStack.sh:bgStackGetFrame:0 finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackGetFrame:1 start
## expect: 

##----------
## setup
##     | cmd> eval 'function a1() { local -A frame; bgStackGetFrame "$@" frame; printfVars frame; }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local -A frame;
##     |     bgStackGetFrame "$@" frame;
##     |     printfVars frame
##     | }

##----------
## test

# expect that the frame printed reflects '1', the argument passed to bgStackGetFrame
cmd> d4 "$@"
frame[]
     [printLine  ]='bg_debugStack.sh.ut:(69): b2(): a1 1'
     [simpleCmd  ]='a1 1'
     [srcLineNo  ]='69'
     [function   ]='b2'
     [srcLocation]='bg_debugStack.sh.ut:(69)'
     [srcFile    ]='/home/bobg/github/bg-AtomPluginSandbox/bg-core/unitTests/bg_debugStack.sh.ut'

## bg_debugStack.sh:bgStackGetFrame:1 finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackGetFrame:2 start
## expect: 

##----------
## setup
##     | cmd> eval 'function a1() { local -A frame; bgStackGetFrame "$@" frame; printfVars frame; }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local -A frame;
##     |     bgStackGetFrame "$@" frame;
##     |     printfVars frame
##     | }

##----------
## test

# expect that the frame printed reflects '2', the argument passed to bgStackGetFrame
cmd> d4 "$@"
frame[]
     [printLine  ]='bg_debugStack.sh.ut:(70): c3(): b2 2'
     [simpleCmd  ]='b2 2'
     [srcLineNo  ]='70'
     [function   ]='c3'
     [srcLocation]='bg_debugStack.sh.ut:(70)'
     [srcFile    ]='/home/bobg/github/bg-AtomPluginSandbox/bg-core/unitTests/bg_debugStack.sh.ut'

## bg_debugStack.sh:bgStackGetFrame:2 finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackGetFrame:tooHigh start
## expect: 

##----------
## setup
##     | cmd> eval 'function a1() { local -A frame; bgStackGetFrame "$@" frame; printfVars frame; }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local -A frame;
##     |     bgStackGetFrame "$@" frame;
##     |     printfVars frame
##     | }

##----------
## test

# expect that the frame printed reflects '40', the argument passed to bgStackGetFrame
cmd> d4 "$@"
frame[]
stderr> non-exception error: bgStackGetFrame: invalid frame spec. targetFrame='-1' stackSize='10'

## bg_debugStack.sh:bgStackGetFrame:tooHigh finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackGetFrame:tooLow start
## expect: 

##----------
## setup
##     | cmd> eval 'function a1() { local -A frame; bgStackGetFrame "$@" frame; printfVars frame; }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local -A frame;
##     |     bgStackGetFrame "$@" frame;
##     |     printfVars frame
##     | }

##----------
## test

# expect that the frame printed reflects '-- -40', the argument passed to bgStackGetFrame
cmd> d4 "$@"
frame[]
     [printLine  ]='bg_debugStack.sh.ut:(68): a1(): bgStackGetFrame -- -40 frame'
     [simpleCmd  ]='bgStackGetFrame -- -40 frame'
     [srcLineNo  ]='68'
     [function   ]='a1'
     [srcLocation]='bg_debugStack.sh.ut:(68)'
     [srcFile    ]='/home/bobg/github/bg-AtomPluginSandbox/bg-core/unitTests/bg_debugStack.sh.ut'

## bg_debugStack.sh:bgStackGetFrame:tooLow finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackGetFrame:byName start
## expect: 

##----------
## setup
##     | cmd> eval 'function a1() { local -A frame; bgStackGetFrame "$@" frame; printfVars frame; }'
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :
##     | cmd> type a1
##     | a1 is a function
##     | a1 () 
##     | { 
##     |     local -A frame;
##     |     bgStackGetFrame "$@" frame;
##     |     printfVars frame
##     | }

##----------
## test

# expect that the frame printed reflects 'c3', the argument passed to bgStackGetFrame
cmd> d4 "$@"
frame[]
     [printLine  ]='bg_debugStack.sh.ut:(71): d4(): c3 c3'
     [simpleCmd  ]='c3 c3'
     [srcLineNo  ]='71'
     [function   ]='d4'
     [srcLocation]='bg_debugStack.sh.ut:(71)'
     [srcFile    ]='/home/bobg/github/bg-AtomPluginSandbox/bg-core/unitTests/bg_debugStack.sh.ut'

## bg_debugStack.sh:bgStackGetFrame:byName finished
###############################################################################################################################


###############################################################################################################################
## bg_debugStack.sh:bgStackMarshal: start
## expect: 

##----------
## setup
##     | cmd> local tmpFile; bgmktemp tmpFile
##     | cmd> function a1() { bgStackMakeLogical; bgStackMarshal --file="$tmpFile"; } ; :
##     | cmd> function b2() { a1 "$@"; }          ; :
##     | cmd> function c3() { b2 "$@"; }          ; :
##     | cmd> function d4() { c3 "$@"; }          ; :

##----------
## test
cmd> d4
[exitCode 1]

# expect that the stack performed on the next line begins with this function 
cmd> bgStackMakeLogical; echo "   [0] ${bgStackLine[0]}"
   [0] bg_debugStack.sh.ut:(93):   : bgStackMakeLogical; echo "   [0] ${bgStackLine[0]}"

# expect that now after restoring stack saved in function a1, the stack variables reflect the stack from that place 
cmd> bgStackUnMarshal --file="$tmpFile"
[exitCode 1]
cmd> for ((i=0; i<5; i++)); do echo "   [$i] ${bgStackLine[$i]}"; done
   [0] bg_debugStack.sh.ut:(85):   : function a1() { bgStackMakeLogical; bgStackMarshal --file="$tmpFile"; } ; :
   [1] bg_debugStack.sh.ut:(86):   : function b2() { a1 "$@"; }          ; :
   [2] bg_debugStack.sh.ut:(87):   : function c3() { b2 "$@"; }          ; :
   [3] bg_debugStack.sh.ut:(88):   : function d4() { c3 "$@"; }          ; :
   [4] bg_debugStack.sh.ut:(91):   : d4

## bg_debugStack.sh:bgStackMarshal: finished
###############################################################################################################################

