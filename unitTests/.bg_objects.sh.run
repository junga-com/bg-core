
###############################################################################################################################
## bg_objects.sh:initialState: start
## expect:  shows the classes that ae initially created and their content

##----------
## setup

##----------
## test
cmd> echo Object ${Object[subClasses]}
Object Class Stack Array BashArray BashMap
cmd> local class; for class in Object ${Object[subClasses]}; do
cmd> showClass "$class"
#
#
#------------------ Object --------------------
global array vars: Object Object_vmt
Object[]
      [baseClass       ]=''
      [_CLASS          ]='Class'
      [_Ref            ]='_bgclassCall Object Class 0 |'
      [0               ]='_bgclassCall Object Class 0 |'
      [classHierarchy  ]='Object'
      [methods         ]='Object::addMethod
      [                ] +Object::bgtrace
      [                ] +Object::clear
      [                ] +Object::clone
      [                ] +Object::eval
      [                ] +Object::exists
      [                ] +Object::fromDebControl
      [                ] +Object::fromFlatINI
      [                ] +Object::fromINI
      [                ] +Object::fromString
      [                ] +Object::get
      [                ] +Object::getAttributes
      [                ] +Object::getIndexes
      [                ] +Object::getMethods
      [                ] +Object::getOID
      [                ] +Object::getRef
      [                ] +Object::getSize
      [                ] +Object::getValues
      [                ] +Object::hasMethod
      [                ] +Object::isA
      [                ] +Object::restoreFile
      [                ] +Object::saveFile
      [                ] +Object::set
      [                ] +Object::toDebControl
      [                ] +Object::toFlatINI
      [                ] +Object::toString
      [                ] +Object::unset'
      [_vmtCacheNum2   ]='26'
      [subClasses      ]='Class Stack Array BashArray BashMap'
      [name            ]='Object'
      [inheritedMethods]=''
      [_OID            ]='Object'
#     
Object_vmt[]
      [_method::fromFlatINI   ]='Object::fromFlatINI'
      [_method::getValues     ]='Object::getValues'
      [_method::getOID        ]='Object::getOID'
      [_method::getRef        ]='Object::getRef'
      [_method::hasMethod     ]='Object::hasMethod'
      [_method::getAttributes ]='Object::getAttributes'
      [_method::isA           ]='Object::isA'
      [_method::toFlatINI     ]='Object::toFlatINI'
      [_method::restoreFile   ]='Object::restoreFile'
      [_method::getSize       ]='Object::getSize'
      [_method::fromDebControl]='Object::fromDebControl'
      [_method::getMethods    ]='Object::getMethods'
      [_method::eval          ]='Object::eval'
      [_method::fromINI       ]='Object::fromINI'
      [_method::saveFile      ]='Object::saveFile'
      [_method::getIndexes    ]='Object::getIndexes'
      [_method::clone         ]='Object::clone'
      [_method::toString      ]='Object::toString'
      [_method::addMethod     ]='Object::addMethod'
      [_method::toDebControl  ]='Object::toDebControl'
      [_method::fromString    ]='Object::fromString'
      [_method::set           ]='Object::set'
      [_method::bgtrace       ]='Object::bgtrace'
      [_method::get           ]='Object::get'
      [_method::clear         ]='Object::clear'
      [_method::exists        ]='Object::exists'
      [_method::unset         ]='Object::unset'

cmd> local class; for class in Object ${Object[subClasses]}; do
cmd> showClass "$class"
#
#
#------------------ Class --------------------
global array vars: Class Class_vmt
Class[]
     [baseClass       ]='Object'
     [_CLASS          ]='Class'
     [_Ref            ]='_bgclassCall Class Class 0 |'
     [0               ]='_bgclassCall Class Class 0 |'
     [classHierarchy  ]='Object Class'
     [methods         ]='Class::__construct
     [                ] +Class::getClassMethods
     [                ] +Class::isA
     [                ] +Class::reloadMethods'
     [_vmtCacheNum2   ]='26'
     [name            ]='Class'
     [inheritedMethods]='Object::addMethod
     [                ] +Object::bgtrace
     [                ] +Object::clear
     [                ] +Object::clone
     [                ] +Object::eval
     [                ] +Object::exists
     [                ] +Object::fromDebControl
     [                ] +Object::fromFlatINI
     [                ] +Object::fromINI
     [                ] +Object::fromString
     [                ] +Object::get
     [                ] +Object::getAttributes
     [                ] +Object::getIndexes
     [                ] +Object::getMethods
     [                ] +Object::getOID
     [                ] +Object::getRef
     [                ] +Object::getSize
     [                ] +Object::getValues
     [                ] +Object::hasMethod
     [                ] +Object::isA
     [                ] +Object::restoreFile
     [                ] +Object::saveFile
     [                ] +Object::set
     [                ] +Object::toDebControl
     [                ] +Object::toFlatINI
     [                ] +Object::toString
     [                ] +Object::unset'
     [_OID            ]='Class'
#    
Class_vmt[]
     [_method::fromFlatINI    ]='Object::fromFlatINI'
     [_method::getValues      ]='Object::getValues'
     [_method::getOID         ]='Object::getOID'
     [_method::getRef         ]='Object::getRef'
     [_method::hasMethod      ]='Object::hasMethod'
     [_method::getAttributes  ]='Object::getAttributes'
     [_method::isA            ]='Class::isA'
     [_method::toFlatINI      ]='Object::toFlatINI'
     [_method::restoreFile    ]='Object::restoreFile'
     [_method::getClassMethods]='Class::getClassMethods'
     [_method::getSize        ]='Object::getSize'
     [_method::__construct    ]='Class::__construct'
     [_method::fromDebControl ]='Object::fromDebControl'
     [_method::getMethods     ]='Object::getMethods'
     [_method::eval           ]='Object::eval'
     [_method::fromINI        ]='Object::fromINI'
     [_method::saveFile       ]='Object::saveFile'
     [_method::getIndexes     ]='Object::getIndexes'
     [_method::clone          ]='Object::clone'
     [_method::toString       ]='Object::toString'
     [_method::addMethod      ]='Object::addMethod'
     [_method::toDebControl   ]='Object::toDebControl'
     [_method::fromString     ]='Object::fromString'
     [_method::set            ]='Object::set'
     [_method::bgtrace        ]='Object::bgtrace'
     [_method::get            ]='Object::get'
     [_method::reloadMethods  ]='Class::reloadMethods'
     [_method::clear          ]='Object::clear'
     [_method::exists         ]='Object::exists'
     [_method::unset          ]='Object::unset'

cmd> local class; for class in Object ${Object[subClasses]}; do
cmd> showClass "$class"
#
#
#------------------ Stack --------------------
global array vars: Stack Stack_vmt
Stack[]
     [baseClass     ]='Object'
     [_CLASS        ]='Class'
     [_Ref          ]='_bgclassCall Stack Class 0 |'
     [0             ]='_bgclassCall Stack Class 0 |'
     [classHierarchy]='Object Stack'
     [name          ]='Stack'
     [_OID          ]='Stack'
#    
Stack_vmt[]

cmd> local class; for class in Object ${Object[subClasses]}; do
cmd> showClass "$class"
#
#
#------------------ Array --------------------
global array vars: Array Array_vmt
Array[]
     [baseClass     ]='Object'
     [_CLASS        ]='Class'
     [_Ref          ]='_bgclassCall Array Class 0 |'
     [0             ]='_bgclassCall Array Class 0 |'
     [classHierarchy]='Object Array'
     [name          ]='Array'
     [_OID          ]='Array'
#    
Array_vmt[]

cmd> local class; for class in Object ${Object[subClasses]}; do
cmd> showClass "$class"
#
#
#------------------ BashArray --------------------
global array vars: BashArray BashArray_vmt
BashArray[]
         [baseClass     ]='Object'
         [_CLASS        ]='Class'
         [_Ref          ]='_bgclassCall BashArray Class 0 |'
         [0             ]='_bgclassCall BashArray Class 0 |'
         [classHierarchy]='Object BashArray'
         [name          ]='BashArray'
         [_OID          ]='BashArray'
#        
BashArray_vmt[]

cmd> local class; for class in Object ${Object[subClasses]}; do
cmd> showClass "$class"
#
#
#------------------ BashMap --------------------
global array vars: BashMap BashMap_vmt
BashMap[]
       [baseClass     ]='Object'
       [_CLASS        ]='Class'
       [_Ref          ]='_bgclassCall BashMap Class 0 |'
       [0             ]='_bgclassCall BashMap Class 0 |'
       [classHierarchy]='Object BashMap'
       [name          ]='BashMap'
       [_OID          ]='BashMap'
#      
BashMap_vmt[]


## bg_objects.sh:initialState: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:isA: start
## expect:  that true tests indicate true and false tests indicate false

##----------
## setup
##     | cmd> DeclareClass Animal
##     | cmd> DeclareClass Dog : Animal

##----------
## test
# expect these to be true
cmd> $Dog.isA "Animal"       && echo yes || echo no
yes
cmd> $Animal.isA "Animal"    && echo yes || echo no
yes
cmd> $Dog.isA "Object"       && echo yes || echo no
yes
cmd> echo

# expect these to be false
cmd> $Animal.isA "Dog"       && echo yes || echo no
no
cmd> $Animal.isA "Dog" # to document the return code
[exitCode 1]
cmd> $Animal.isA "Car"       && echo yes || echo no
no

## bg_objects.sh:isA: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:getClassMethods: start
## expect:  the correct set of methods to be printed to stdout. -i includes inherited, -d changes the delimiter between methods

##----------
## setup
##     | cmd> DeclareClass Animal

##----------
## test
cmd> $Animal.getClassMethods
speak feed pet
cmd> $Animal.getClassMethods -i
unset get speak hasMethod fromINI getOID getRef addMethod getAttributes toDebControl fromFlatINI restoreFile exists clear fromString bgtrace fromDebControl toString set eval toFlatINI getValues getSize getMethods isA saveFile feed getIndexes clone pet
cmd> $Animal.getClassMethods -d$'\n'
speak
feed
pet

## bg_objects.sh:getClassMethods: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:ConstructObject: start
## expect:  the state after constructing a object 3 different ways is all consistent with each other

##----------
## setup
##     | cmd> DeclareClass Animal

##----------
## test
cmd> local pet; ConstructObject Animal pet
cmd> local petOID="$(GetOID $pet)"
cmd> eval 'local petOIDVars="${!'"$petOID"'*}"'
cmd> echo "global vars for this object = ${petOIDVars}" | heapNameAnon
global vars for this object = heap_A_<redacted>
cmd> printfVars --noObjects pet $petOIDVars | heapNameAnon
pet='_bgclassCall heap_A_<redacted> Animal 0 |'
heap_A_<redacted>
                [_CLASS  ]='Animal'
                [_Ref    ]='_bgclassCall heap_A_<redacted> Animal 0 |'
                [0       ]='_bgclassCall heap_A_<redacted> Animal 0 |'
                [legCount]='unk'
                [species ]='unk'
                [family  ]='unk'
                [_OID    ]='heap_A_<redacted>

##----------
## test
cmd> local -A pet2; ConstructObject Animal pet2
cmd> local pet2OID="$(GetOID $pet2)"
cmd> eval 'local pet2OIDVars="${!'"$pet2OID"'*}"'
cmd> echo "vars for this object = ${pet2OIDVars}" | heapNameAnon
vars for this object = pet2 pet2OID
cmd> printfVars --noObjects $pet2OIDVars | heapNameAnon
pet2[]
    [_CLASS  ]='Animal'
    [_Ref    ]='_bgclassCall pet2 Animal 0 |'
    [0       ]='_bgclassCall pet2 Animal 0 |'
    [legCount]='unk'
    [species ]='unk'
    [family  ]='unk'
    [_OID    ]='pet2'
pet2OID='pet2'

##----------
## test
cmd> local -n pet3; ConstructObject Animal pet3
cmd> local pet3OID="$(GetOID $pet3)"
cmd> eval 'local pet3OIDVars="${!'"$pet3OID"'*}"'
cmd> echo "global vars for this object = ${pet3OIDVars}" | heapNameAnon
global vars for this object = heap_A_<redacted>
cmd> printfVars --noObjects pet3 $pet3OIDVars | heapNameAnon
pet3[]
    [_CLASS  ]='Animal'
    [_Ref    ]='_bgclassCall heap_A_<redacted> Animal 0 |'
    [0       ]='_bgclassCall heap_A_<redacted> Animal 0 |'
    [legCount]='unk'
    [species ]='unk'
    [family  ]='unk'
    [_OID    ]='heap_A_<redacted>
heap_A_<redacted>
    [_CLASS  ]='Animal'
    [_Ref    ]='_bgclassCall heap_A_<redacted> Animal 0 |'
    [0       ]='_bgclassCall heap_A_<redacted> Animal 0 |'
    [legCount]='unk'
    [species ]='unk'
    [family  ]='unk'
    [_OID    ]='heap_A_<redacted>

## bg_objects.sh:ConstructObject: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:_classUpdateVMT: start
## expect: 

##----------
## setup
##     | speak

##----------
## test
# expect that pet and feed are not in this list
Animal::speak
# expect that now pet and feed are in this list
Animal::feed
Animal::pet
Animal::speak

## bg_objects.sh:_classUpdateVMT: finished
###############################################################################################################################

