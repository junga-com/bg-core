
###############################################################################################################################
## bg_objects.sh:initialState: start
## expect:  shows the classes that ae initially created and their content

##----------
## setup

##----------
## test
cmd> echo Object ${Object[subClasses]}
Object Class Stack Array Map
cmd> local class; for class in Object ${Object[subClasses]}; do
cmd> showClass "$class"
#
#
#------------------ Object --------------------
global array vars: Object Object_vmt
Object[]
      [baseClass       ]=''
      [_CLASS          ]='Class'
      [0               ]='_bgclassCall Object Class 0 |'
      [_Ref            ]='_bgclassCall Object Class 0 |'
      [classHierarchy  ]='Object'
      [methods         ]='Object::addMethod
      [                ] +Object::bgtrace
      [                ] +Object::clear
      [                ] +Object::clone
      [                ] +Object::eval
      [                ] +Object::exists
      [                ] +Object::fromDebControl
      [                ] +Object::fromFlatINI
      [                ] +Object::fromINI
      [                ] +Object::fromString
      [                ] +Object::get
      [                ] +Object::getAttributes
      [                ] +Object::getIndexes
      [                ] +Object::getMethods
      [                ] +Object::getOID
      [                ] +Object::getRef
      [                ] +Object::getSize
      [                ] +Object::getValues
      [                ] +Object::hasMethod
      [                ] +Object::isA
      [                ] +Object::restoreFile
      [                ] +Object::saveFile
      [                ] +Object::set
      [                ] +Object::toDebControl
      [                ] +Object::toFlatINI
      [                ] +Object::toString
      [                ] +Object::unset'
      [_vmtCacheNum2   ]='26'
      [subClasses      ]='Class Stack Array Map'
      [name            ]='Object'
      [inheritedMethods]=''
      [_OID            ]='Object'
#     
Object_vmt[]
      [_method::fromFlatINI   ]='Object::fromFlatINI'
      [_method::getValues     ]='Object::getValues'
      [_method::getOID        ]='Object::getOID'
      [_method::getRef        ]='Object::getRef'
      [_method::hasMethod     ]='Object::hasMethod'
      [_method::getAttributes ]='Object::getAttributes'
      [_method::isA           ]='Object::isA'
      [_method::toFlatINI     ]='Object::toFlatINI'
      [_method::restoreFile   ]='Object::restoreFile'
      [_method::getSize       ]='Object::getSize'
      [_method::fromDebControl]='Object::fromDebControl'
      [_method::getMethods    ]='Object::getMethods'
      [_method::eval          ]='Object::eval'
      [_method::fromINI       ]='Object::fromINI'
      [_method::saveFile      ]='Object::saveFile'
      [_method::getIndexes    ]='Object::getIndexes'
      [_method::clone         ]='Object::clone'
      [_method::toString      ]='Object::toString'
      [_method::addMethod     ]='Object::addMethod'
      [_method::toDebControl  ]='Object::toDebControl'
      [_method::fromString    ]='Object::fromString'
      [_method::set           ]='Object::set'
      [_method::bgtrace       ]='Object::bgtrace'
      [_method::get           ]='Object::get'
      [_method::clear         ]='Object::clear'
      [_method::exists        ]='Object::exists'
      [_method::unset         ]='Object::unset'

cmd> local class; for class in Object ${Object[subClasses]}; do
cmd> showClass "$class"
#
#
#------------------ Class --------------------
global array vars: Class Class_vmt
Class[]
     [baseClass       ]='Object'
     [_CLASS          ]='Class'
     [0               ]='_bgclassCall Class Class 0 |'
     [_Ref            ]='_bgclassCall Class Class 0 |'
     [classHierarchy  ]='Object Class'
     [methods         ]='Class::__construct
     [                ] +Class::getClassMethods
     [                ] +Class::isA
     [                ] +Class::reloadMethods'
     [_vmtCacheNum2   ]='26'
     [name            ]='Class'
     [inheritedMethods]='Object::addMethod
     [                ] +Object::bgtrace
     [                ] +Object::clear
     [                ] +Object::clone
     [                ] +Object::eval
     [                ] +Object::exists
     [                ] +Object::fromDebControl
     [                ] +Object::fromFlatINI
     [                ] +Object::fromINI
     [                ] +Object::fromString
     [                ] +Object::get
     [                ] +Object::getAttributes
     [                ] +Object::getIndexes
     [                ] +Object::getMethods
     [                ] +Object::getOID
     [                ] +Object::getRef
     [                ] +Object::getSize
     [                ] +Object::getValues
     [                ] +Object::hasMethod
     [                ] +Object::isA
     [                ] +Object::restoreFile
     [                ] +Object::saveFile
     [                ] +Object::set
     [                ] +Object::toDebControl
     [                ] +Object::toFlatINI
     [                ] +Object::toString
     [                ] +Object::unset'
     [_OID            ]='Class'
#    
Class_vmt[]
     [_method::fromFlatINI    ]='Object::fromFlatINI'
     [_method::getValues      ]='Object::getValues'
     [_method::getOID         ]='Object::getOID'
     [_method::getRef         ]='Object::getRef'
     [_method::hasMethod      ]='Object::hasMethod'
     [_method::getAttributes  ]='Object::getAttributes'
     [_method::isA            ]='Class::isA'
     [_method::toFlatINI      ]='Object::toFlatINI'
     [_method::restoreFile    ]='Object::restoreFile'
     [_method::getClassMethods]='Class::getClassMethods'
     [_method::getSize        ]='Object::getSize'
     [_method::__construct    ]='Class::__construct'
     [_method::fromDebControl ]='Object::fromDebControl'
     [_method::getMethods     ]='Object::getMethods'
     [_method::eval           ]='Object::eval'
     [_method::fromINI        ]='Object::fromINI'
     [_method::saveFile       ]='Object::saveFile'
     [_method::getIndexes     ]='Object::getIndexes'
     [_method::clone          ]='Object::clone'
     [_method::toString       ]='Object::toString'
     [_method::addMethod      ]='Object::addMethod'
     [_method::toDebControl   ]='Object::toDebControl'
     [_method::fromString     ]='Object::fromString'
     [_method::set            ]='Object::set'
     [_method::bgtrace        ]='Object::bgtrace'
     [_method::get            ]='Object::get'
     [_method::reloadMethods  ]='Class::reloadMethods'
     [_method::clear          ]='Object::clear'
     [_method::exists         ]='Object::exists'
     [_method::unset          ]='Object::unset'

cmd> local class; for class in Object ${Object[subClasses]}; do
cmd> showClass "$class"
#
#
#------------------ Stack --------------------
global array vars: Stack
Stack[]
     [baseClass     ]='Object'
     [_CLASS        ]='Class'
     [0             ]='_bgclassCall Stack Class 0 |'
     [_Ref          ]='_bgclassCall Stack Class 0 |'
     [classHierarchy]='Object Stack'
     [name          ]='Stack'
     [_OID          ]='Stack'
#    
Stack_vmt[]

cmd> local class; for class in Object ${Object[subClasses]}; do
cmd> showClass "$class"
#
#
#------------------ Array --------------------
global array vars: Array
Array[]
     [baseClass     ]='Object'
     [_CLASS        ]='Class'
     [0             ]='_bgclassCall Array Class 0 |'
     [_Ref          ]='_bgclassCall Array Class 0 |'
     [oidAttributes ]='a'
     [classHierarchy]='Object Array'
     [defaultIndex  ]='off'
     [name          ]='Array'
     [_OID          ]='Array'
#    
Array_vmt[]

cmd> local class; for class in Object ${Object[subClasses]}; do
cmd> showClass "$class"
#
#
#------------------ Map --------------------
global array vars: Map
Map[]
   [baseClass     ]='Object'
   [_CLASS        ]='Class'
   [0             ]='_bgclassCall Map Class 0 |'
   [_Ref          ]='_bgclassCall Map Class 0 |'
   [classHierarchy]='Object Map'
   [defaultIndex  ]='off'
   [name          ]='Map'
   [_OID          ]='Map'
#  
Map_vmt[]


## bg_objects.sh:initialState: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:isA: start
## expect:  that true tests indicate true and false tests indicate false

##----------
## setup
##     | cmd> DeclareClass Animal
##     | cmd> DeclareClass Dog : Animal

##----------
## test

# expect these to be true
cmd> $Dog.isA "Animal"       && echo yes || echo no
yes
cmd> $Animal.isA "Animal"    && echo yes || echo no
yes
cmd> $Dog.isA "Object"       && echo yes || echo no
yes
cmd> echo


# expect these to be false
cmd> $Animal.isA "Dog"       && echo yes || echo no
no
cmd> $Animal.isA "Dog" # to document the return code
[exitCode 1]
cmd> $Animal.isA "Car"       && echo yes || echo no
no

## bg_objects.sh:isA: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:getClassMethods: start
## expect:  the correct set of methods to be printed to stdout. -i includes inherited, -d changes the delimiter between methods

##----------
## setup
##     | cmd> DeclareClass Animal

##----------
## test
cmd> $Animal.getClassMethods
speak feed pet
cmd> $Animal.getClassMethods -i
unset get speak hasMethod fromINI getOID getRef addMethod getAttributes toDebControl fromFlatINI restoreFile exists clear fromString bgtrace fromDebControl toString set eval toFlatINI getValues getSize getMethods isA saveFile feed getIndexes clone pet
cmd> $Animal.getClassMethods -d$'\n'
speak
feed
pet

## bg_objects.sh:getClassMethods: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:ConstructObject: start
## expect:  the state after constructing a object 3 different ways is all consistent with each other

##----------
## setup
##     | cmd> DeclareClass Animal

##----------
## test
cmd> local pet; ConstructObject Animal pet
cmd> local petOID="$(GetOID "$pet")"
cmd> eval 'local petOIDVars="${!'"$petOID"'*}"'
cmd> echo "global vars for this object = ${petOIDVars}" | heapNameAnon
global vars for this object = heap_A_<redacted> heap_A_<redacted>_sys
cmd> printfVars --noObjects pet $petOIDVars | heapNameAnon
pet='_bgclassCall heap_A_<redacted> Animal 0 |'
heap_A_<redacted>
                [0       ]='_bgclassCall heap_A_<redacted> Animal 0 |'
                [legCount]='unk'
                [species ]='unk'
                [family  ]='unk'
heap_A_<redacted>_sys[]
                [_CLASS]='Animal'
                [0     ]='_bgclassCall heap_A_<redacted> Animal 0 |'
                [_Ref  ]='_bgclassCall heap_A_<redacted> Animal 0 |'
                [_OID  ]='heap_A_<redacted>

##----------
## test
cmd> local -A pet2; ConstructObject Animal pet2
cmd> local pet2OID="$(GetOID "$pet2")"
cmd> eval 'local pet2OIDVars="${!'"$pet2OID"'*}"'
cmd> echo "vars for this object = ${pet2OIDVars}" | heapNameAnon
vars for this object = pet2 pet2OID
cmd> printfVars --noObjects $pet2OIDVars | heapNameAnon
pet2[]
    [_CLASS  ]='Animal'
    [0       ]='_bgclassCall pet2 Animal 0 |'
    [_Ref    ]='_bgclassCall pet2 Animal 0 |'
    [legCount]='unk'
    [species ]='unk'
    [family  ]='unk'
    [_OID    ]='pet2'
pet2OID='pet2'

##----------
## test
cmd> local -n pet3; ConstructObject Animal pet3
cmd> local pet3OID="$(GetOID "$pet3")"
cmd> eval 'local pet3OIDVars="${!'"$pet3OID"'*}"'
cmd> echo "global vars for this object = ${pet3OIDVars}" | heapNameAnon
global vars for this object = heap_A_<redacted> heap_A_<redacted>_sys
cmd> printfVars --noObjects pet3 $pet3OIDVars | heapNameAnon
pet3[]
    [0       ]='_bgclassCall heap_A_<redacted> Animal 0 |'
    [legCount]='unk'
    [species ]='unk'
    [family  ]='unk'
heap_A_<redacted>
    [0       ]='_bgclassCall heap_A_<redacted> Animal 0 |'
    [legCount]='unk'
    [species ]='unk'
    [family  ]='unk'
heap_A_<redacted>_sys[]
    [_CLASS]='Animal'
    [0     ]='_bgclassCall heap_A_<redacted> Animal 0 |'
    [_Ref  ]='_bgclassCall heap_A_<redacted> Animal 0 |'
    [_OID  ]='heap_A_<redacted>

## bg_objects.sh:ConstructObject: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:_classUpdateVMT: start
## expect: 

##----------
## setup
##     | cmd> DeclareClass Animal
##     | cmd> $Animal.getClassMethods
##     | speak

##----------
## test

# expect that pet and feed are not in this list
cmd> echo "${Animal[methods]}"
Animal::speak
cmd> _classUpdateVMT -f "Animal"

# expect that now pet and feed are in this list
cmd> echo "${Animal[methods]}"
Animal::feed
Animal::pet
Animal::speak

## bg_objects.sh:_classUpdateVMT: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:Array: start
## expect: 

##----------
## test
cmd> local -n a1; ConstructObject Array a1
cmd> printfVars a1
a1[]
cmd> a1=(one two three)
cmd> printfVars a1
a1[]
  [0]='one'
  [1]='two'
  [2]='three'

##----------
## test
cmd> local a2; ConstructObject Array a2
cmd> $a2.getOID | heapNameAnon
heap_a_<redacted>
cmd> local -n a2OID; $a2.getOID a2OID
cmd> printfVars a2
a2 : <instance> of Array
cmd> a2OID=(one two three)
cmd> printfVars a2
a2 : <instance> of Array
  [0]=one
  [1]=two
  [2]=three
cmd> $a2.getSize
3

## bg_objects.sh:Array: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:Map: start
## expect: 

##----------
## test
cmd> local -n a1; ConstructObject Map a1
cmd> printfVars a1
a1[]
cmd> a1=([one]=1 [two]=2 [three]=3)
cmd> printfVars a1
a1[]
  [two  ]='2'
  [three]='3'
  [one  ]='1'

##----------
## test
cmd> local a2; ConstructObject Map a2
cmd> $a2.getOID | heapNameAnon
heap_A_<redacted>
cmd> printfVars --noObjects "$($a2.getOID)"{,_sys} | heapNameAnon
heap_A_<redacted>
heap_A_<redacted>_sys[]
                [_CLASS]='Map'
                [0     ]='_bgclassCall heap_A_<redacted> Map 0 |'
                [_Ref  ]='_bgclassCall heap_A_<redacted> Map 0 |'
                [_OID  ]='heap_A_<redacted>
cmd> local -n a2OID; $a2.getOID a2OID
cmd> printfVars a2
a2 : <instance> of Map
cmd> a2OID=([one]=1 [two]=2 [three]=3)
cmd> $a2.getIndexes
two three one
cmd> printfVars a2
a2 : <instance> of Map
  two  =2
  three=3
  one  =1
cmd> printfVars --noObjects "$($a2.getOID)"{,_sys} | heapNameAnon
heap_A_<redacted>
                [two  ]='2'
                [three]='3'
                [one  ]='1'
heap_A_<redacted>_sys[]
                [_CLASS]='Map'
                [0     ]='_bgclassCall heap_A_<redacted> Map 0 |'
                [_Ref  ]='_bgclassCall heap_A_<redacted> Map 0 |'
                [_OID  ]='heap_A_<redacted>
cmd> $a2.getSize
3

## bg_objects.sh:Map: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:Stack: start
## expect: 

##----------
## test
cmd> local -n a1; ConstructObject Stack a1
cmd> printfVars a1
a1 : <instance> of Stack
  length=0
cmd> $a1.push one
cmd> $a1.push two
cmd> $a1.push three
cmd> $a1.getSize
3
cmd> printfVars a1
a1 : <instance> of Stack
  length=3
  e2    =three
  e0    =one
  e1    =two
cmd> for ((i=0; i<$($a1.getSize); i++)); do $a1.peek $i; done
three
two
one
cmd> local element
cmd> while $a1.pop element; do printfVars element; done
element='three'
element='two'
element='one'

##----------
## test
cmd> local a2; ConstructObject Stack a2
cmd> printfVars a2
a2 : <instance> of Stack
  length=0
cmd> $a2.push one
cmd> $a2.push two
cmd> $a2.push three
cmd> $a2.getSize
3
cmd> printfVars a2
a2 : <instance> of Stack
  length=3
  e2    =three
  e0    =one
  e1    =two
cmd> for ((i=0; i<$($a2.getSize); i++)); do $a2.peek $i; done
three
two
one
cmd> local element
cmd> while $a2.pop element; do printfVars element; done
element='three'
element='two'
element='one'

## bg_objects.sh:Stack: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:nestedObjects: start
## expect:  the DataFile::read() method refer to "filename" and "data" directly without using the array notation this[filename]

##----------
## setup
##     | cmd> DeclareClass DataFile
##     | cmd> local tmpFile; bgmktemp tmpFile
##     | cmd> ')" | tee "$tmpFile"
##     | one fish
##     | two fish
##     | red fish
##     | blue fish

##----------
## test
cmd> ConstructObject DataFile datafile "$tmpFile"
cmd> printfVars datafile  | tempFileAnon
datafile : <instance> of DataFile
  filename=/tmp/bgmktemp.<redacted>
  data : <instance> of Array
    [0]=one fish
    [1]=two fish
    [2]=red fish
    [3]=blue fish

## bg_objects.sh:nestedObjects: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:Object_unset: start
## expect: 

##----------
## setup
##     | cmd> local -n obj; ConstructObject Object obj

##----------
## test
cmd> obj[foo]="hello"

# expect that foo is present
cmd> printfVars obj
obj : <instance> of Object
  foo=hello
cmd> $obj.foo.unset

# expect that foo is not present
cmd> printfVars obj
obj : <instance> of Object

## bg_objects.sh:Object_unset: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:Object_exists: start
## expect: 

##----------
## setup
##     | cmd> local -n obj; ConstructObject Object obj

##----------
## test

# expect that foo does not exist
cmd> $obj.foo.exists && echo true || echo false
false
cmd> obj[foo]="hello"

# expect that foo exists now
cmd> $obj.foo.exists && echo true || echo false
true

## bg_objects.sh:Object_exists: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:Object_isA: start
## expect: 

##----------
## setup
##     | cmd> local -n obj; ConstructObject Object obj

##----------
## test

# expect that only isA object will be true
cmd> $obj.isA Object && echo true || echo false
true
cmd> $obj.isA Array  && echo true || echo false
false
cmd> $obj.isA Foo    && echo true || echo false
false

## bg_objects.sh:Object_isA: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:Object_assignNewOp: start
## expect: 

##----------
## setup
##     | cmd> local -n obj; ConstructObject Object obj

##----------
## test
cmd> $obj.foo=new Array
cmd> printfVars obj
obj : <instance> of Object
  foo : <instance> of Array

## bg_objects.sh:Object_assignNewOp: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:Object_staticCallSyntax: start
## expect: 

##----------
## setup
##     | cmd> local -n obj; ConstructObject Object obj

##----------
## test

# expect that the Object class object is printed
cmd> $obj.static.toString
baseClass       =
classHierarchy  =Object
methods         =Object::addMethod
+ Object::bgtrace
+ Object::clear
+ Object::clone
+ Object::eval
+ Object::exists
+ Object::fromDebControl
+ Object::fromFlatINI
+ Object::fromINI
+ Object::fromString
+ Object::get
+ Object::getAttributes
+ Object::getIndexes
+ Object::getMethods
+ Object::getOID
+ Object::getRef
+ Object::getSize
+ Object::getValues
+ Object::hasMethod
+ Object::isA
+ Object::restoreFile
+ Object::saveFile
+ Object::set
+ Object::toDebControl
+ Object::toFlatINI
+ Object::toString
+ Object::unset
subClasses      =Class Stack Array Map
name            =Object
inheritedMethods=

## bg_objects.sh:Object_staticCallSyntax: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:Object_chainCallSyntax: start
## expect: 

##----------
## setup
##     | cmd> local -n obj; ConstructObject Object obj
##     | cmd> $obj.foo=new Map
##     | cmd> $obj.foo[bar]="hello world"

##----------
## test

# expect that foo member's toString method is called
cmd> $obj.foo.toString
bar=hello world

## bg_objects.sh:Object_chainCallSyntax: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:Object_equalsOp: start
## expect: 

##----------
## setup
##     | cmd> local -n obj; ConstructObject Object obj
##     | cmd> $obj.num=5
##     | cmd> $obj.str="hello"

##----------
## test

# expect that the new values are appended. This documents whether num is appended as a string or added
cmd> $obj.num+=10
cmd> $obj.str+=" world"
cmd> $obj.toString
str=hello world
num=510

# expect equal to replace the previous value
cmd> $obj.num=10
cmd> $obj.str="goodbye"
cmd> $obj.toString
str=goodbye
num=10

## bg_objects.sh:Object_equalsOp: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:Object_virtualCallSyntax: start
## expect: 

##----------
## setup
##     | cmd> DeclareClass Base
##     | cmd> DeclareClass Derived : Base
##     | cmd> local -n obj; ConstructObject Derived obj

##----------
## test

# expect normal polymorphism -- to see only msg from Derived::two
cmd> $obj.two
Derived::two

# expect explicit call -- to see only msg from Base::two
cmd> $obj.Base::two
Base::two

# expect polymorphism with super -- to see msg from Derived::one and then from Base:one
cmd> $obj.one
Derived::one
Base::one

## bg_objects.sh:Object_virtualCallSyntax: finished
###############################################################################################################################


###############################################################################################################################
## bg_objects.sh:Object_membersThatDontExist: start
## expect: 

##----------
## setup
##     | cmd> local -n obj; ConstructObject Object obj
##     | cmd> $obj.foo="hello world"

##----------
## test

# expect to see what happens when we reference an attribute that exists
cmd> $obj.foo
hello world

# expect to see what happens when we reference an attribute that does not exist
cmd> $obj.bar

[exitCode 1]

# expect to see what happens when we reference a method that does not exist (because it has arguments)
cmd> Try:
cmd> $obj.doit p1 p2 p3
** Exception thrown and caught
catch_errorClass='assertError'
catch_errorCode='36'
catch_errorDescription='
                        error: _bgclassCall: member 'doit' not found for class Object
                            _OID='heap_A_<redacted>
                            memberExpression='doit  p1 p2 p3''

## bg_objects.sh:Object_membersThatDontExist: finished
###############################################################################################################################

