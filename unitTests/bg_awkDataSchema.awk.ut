#!/usr/bin/env bg-utRunner

function makeTestData() {
	[ "$_makeTestData" ] && return
	declare -g makeTestData=1

	declare -g utDataFolder="$(mktemp -d)"

	### Make type1 complete awkDataID registered, with data and schema files

	# add it to the manifest which points to the schema file
	echo "ut awkDataSchema type1 $utDataFolder/type1.awkDataSchema" >>"$utDataFolder/manifest"

	# type1 schema file which points to the data file
	cat - >"$utDataFolder/type1.awkDataSchema" <<-EOS
		columns=one(10) two(5) three(13)
		awkFile="$utDataFolder/type1.cache"
	EOS

	# type1 data file
	cat - >"$utDataFolder/type1.cache" <<-EOS
		one(10) two(5) three(13)
		<dependentsList>
		red       1        --
		blue      2        --
		green     3        --
	EOS



	### Make a one-off data file

	# foo data file
	cat - >"$utDataFolder/foo.data" <<-EOS
		manufacture  model serial

		supermicro    CU465       12345
		supermicro    SM305       12346
		ibm           x306        12347
		ibm           x3650       12347
	EOS


	### Make a one-off data file

	# bar schema file
	cat - >"$utDataFolder/bar.schema" <<-EOS
		columns=one(10) two(5) three(13)
		awkFile="$utDataFolder/bar.cache"
	EOS
}


function ut_awkData_parseID() {
	ut setup
	# from gawk 5.0 to 5.1, the format of this error message changed so we redacted it so keep the test cases consistent
	ut filter '(gawk: fatal: cannot open file ).*$###\1... <redacted>'
	makeTestData
	export bgVinstalledManifest="$utDataFolder/manifest"
	cat "$bgVinstalledManifest"
	ls -1 "$utDataFolder/"

	ut test
	ut expect "that the long form ID is completely filled in from the manifest"
	awkDataID="type1"
	awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'

	ut test
	ut expect "empty file parts because type2 does ot exist in the manifest"
	awkDataID="type2"
	awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'

	ut test
	ut expect "the data one-off data file with no schema"
	awkDataID="$utDataFolder/foo.data"
	awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'

	ut test
	ut expect "the one-off data file does not need to exist"
	awkDataID="$utDataFolder/type2.data"
	awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'

	ut test
	ut expect "the one-off data file with the same base name as an installed awkObjName will use its schema"
	awkDataID="$utDataFolder/type1.myData"
	awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'

	ut test
	ut expect "an exception because the specified schema file does not exit"
	awkDataID="$utDataFolder/type2.schema"
	awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'

	ut test
	ut expect "specify an existing schema file but the data file does not yet exit"
	awkDataID="$utDataFolder/bar.schema"
	awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'

	ut test
	ut expect "we can use an existing awkObjName schema with a totally new data file name"
	awkDataID="|$utDataFolder/bar.schema|type1"
	awk -v testData="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {print("long form = " awkData_parseID(testData))}'

}

declare -A ut_schema_restore=(
	["installedSchema"]="type1"
	["oneOffSchemaFile"]="<utDataFolder>/bar.schema"
	["oneOffDataFile"]="<utDataFolder>/foo.data"
)
function ut_schema_restore() {
	ut setup
	makeTestData
	awkDataID="${1//<utDataFolder>/$utDataFolder}"
	export bgVinstalledManifest="$utDataFolder/manifest"
	cat "$bgVinstalledManifest"

	ut test
	echo "awkDataID=$awkDataID" #noecho
	awk  -v awkDataID="$awkDataID" '@include "bg_awkDataSchema.awk"; BEGIN {PROCINFO["sorted_in"]="@ind_str_asc";  printfVars("-o/dev/stdout schemas awkDataID")}'
}

declare -gA ut_expr_compile=(
	[empty]="$(cmdline "")"
	[andTerms]="$(cmdline "one:blue two:2")"
	[orTerms]="$(cmdline "one,two:blue")"
	[anyTerms]="$(cmdline "any:blue")"
	[eqOp]="$(cmdline "one:red one:=red one=red one==red")"
	[neOp]="$(cmdline "one:!red one!red one:<>red one<>red")"
	[reOp]="$(cmdline "one:~red one~red")"
	[nreOp]="$(cmdline "one:!~red one!~red")"
	[ltOp]="$(cmdline "one<red one:<red")"
	[leOp]="$(cmdline "one<=red one:<=red")"
	[gtOp]="$(cmdline "one>red one:>red")"
	[geOp]="$(cmdline "one>=red one:>=red")"
	[invalidOp]="$(cmdline "one!>=red")"
)
function ut_expr_compile() {
	ut setup
	makeTestData
	export bgVinstalledManifest="$utDataFolder/manifest"
	cat "$bgVinstalledManifest"
	awkScript='
		@include "bg_awkDataSchema.awk"
		BEGIN {
			PROCINFO["sorted_in"]="@ind_str_asc";
			arrayCreate(compiledExpr);
			expr_compile(filterExpr, compiledExpr, schemas["type1"]);
			printfVars("-o/dev/stdout compiledExpr");
		}
	'
	echo "$awkScript"

	ut test
	echo "$1"
	awk  -v awkDataIDList="type1" -v filterExpr="$1" "$awkScript"
}
