#!/usr/bin/env bg-utRunner

import bg_objects.sh  ;$L1;$L2


ut_printfVars=(
	[0]="$(cmdline string narray aarray -l"hello world")"
	[1]="$(cmdline var1:string var2:narray var3:aarray)"
	[2]="$(cmdline -w20 string narray aarray)"
	[3]="$(cmdline longStr)"
	[4]="$(cmdline -1 string narray aarray)"
	[5]="$(cmdline -1 var1:string var2:narray var3:aarray)"
	[6]="$(cmdline -1 -w20 string narray aarray)"
	[7]="$(cmdline -1 -l"one" -l"two" +1 -l"three" -l"four")"
	[8]="$(cmdline "   " -l"one" -l"two" "      " -l"three" -l"four")"
	[9]="$(cmdline iDontExist "I dont exist")"
	[10]="$(cmdline narray narray[2] aarray aarray[two] )"
)
function ut_printfVars()
{
	# expect: the output of different types of variables to show their value
	ut setup
	local string="i am a string"
	local -a narray=(one two three)
	local -A aarray=(
		[one]=1
		[two]=$(dedent '
			hello
			world
		')
		[three]=3
	)
	local longStr="now is the time that all good men should come to the aid of their country. Now is the time that all good men should come to the aid of their country"

	ut test
	echo printfVars "$@"
	printfVars "$@"
}


function ut_printfVars_nameRefs()
{
	# expect: the output of different types of variables to show their value
	ut setup
	local string="i am a string"
	local -a narray=(one two three)
	local -A aarray=(
		[one]=1
		[two]=$(dedent '
			hello
			world
		')
		[three]=3
	)
	local longStr="now is the time that all good men should come to the aid of their country. Now is the time that all good men should come to the aid of their country"

	local -n nr_string=string
	local -n nr_narray=narray
	local -n nr_narray_2="narray[2]"
	local -n nr_aarray=aarray
	local -n nr_aarray_two="aarray[two]"
	local -n nr_longStr=longStr

	ut test
	printfVars nr_string nr_narray nr_narray_2 nr_aarray nr_aarray_two nr_longStr
}

function ut_printfVars_objects()
{
	# expect: the output of different types of variables to show their value
	ut setup
	DeclareClass Animal
	Animal::__construct() { this[species]="unk"; }
	Animal::speak() { echo "i am just a generic animal"; }

	DeclareClass Dog Animal
	Dog::__construct() { this[species]="dog"; }
	Dog::speak() { echo "woof"; }

	DeclareClass Cat Animal
	Cat::__construct() { this[species]="cat"; }
	Cat::speak() { echo "meow"; }

	local -A myDog=(); ConstructObject Dog myDog
	local -A myCat=(); ConstructObject Cat myCat

	ut test
	printfVars Animal "" Dog "" Cat "" myDog "" myCat
	printfVars --noObjects myCat
}



declare -A ut_varOutput=(
	[oneValue]="$(cmdline "one two three")"
	[multipleValues]="$(cmdline one two three)"
)
function ut_varOutput() {
	ut setup
	local strVar="initial value"
	local -a arrayVar=(initial value)
	local -A setVar=([initial]="" [value]="")
	echo "'$1' '$2' '$3' '$4'"

	ut test
	varOutput "$@"
	varOutput -1 "$@"
	varOutput +1 "$@"
	varOutput -d'|' "$@"

	ut test
	varOutput -a -RstrVar   "$@"; printfVars strVar
	varOutput -a -1 -RstrVar   "$@"; printfVars strVar
	varOutput -a +1 -RstrVar   "$@"; printfVars strVar
	varOutput -RstrVar   "$@"; printfVars strVar
	varOutput -1 -RstrVar   "$@"; printfVars strVar
	varOutput +1 -RstrVar   "$@"; printfVars strVar

	ut test
	varOutput -a -AarrayVar "$@"; printfVars arrayVar
	varOutput -AarrayVar "$@"; printfVars arrayVar

	ut test
	varOutput -a -SsetVar   "$@"; printfVars setVar
	varOutput -SsetVar   "$@"; printfVars setVar
}


function ut_varGetAttributes()
{
	ut test
	local -A bar;      varGetAttributes bar  # returns 'A'
	local -n goo;      varGetAttributes goo  # 'n@' (unitialized nameref)
	goo=bar;           varGetAttributes goo  # 'nA' (nameref to an associative Array)
	local -n goo2;
	goo2=noExists;     varGetAttributes goo2 # 'n'  (nameref to non-existent variable)
	unset bar;         varGetAttributes goo  # 'n'  (nameref to non-existent variable)
	bar=5;             varGetAttributes goo  # 'n-' (nameref to variable with no attrbutes)
	local -n goo3=goo; varGetAttributes goo3 # 'nn-' (nameref a nameref to variable with no attrbutes)

	local -i i;        varGetAttributes i

	local    a1;       varGetAttributes a1
	local a2=();       varGetAttributes a2
	local -a a3;       varGetAttributes a3
	local -arix a4;    varGetAttributes a4

	local    A1;       varGetAttributes A1
	local -A A2;       varGetAttributes A2
	local -Arix A3;    varGetAttributes A3

	local -x ary=(one two three); varGetAttributes ary[1]
	varGetAttributes ary[5]

	local -A map=([one]=1 [two]=2 [three]=3)
	varGetAttributes map[two]
	varGetAttributes map[5]
	varGetAttributes map[@]
	varGetAttributes map[*]
	local -rA map2=([one]=1 [two]=2 [three]=3)
	varGetAttributes map2
	varGetAttributes map2[two]
	varGetAttributes map2[5]
}
