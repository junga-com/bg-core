#!/usr/bin/env bg-utRunner

import bg_ini.sh      ;$L1;$L2


###################################################################################################
### Data

iniFileData_empty=''

iniFileData_noSections='
p1=foo
p2 = 3
p3.a = "hello world"

honey=good

'
iniFileData_noTopLevel='
[ sect1 ]
p1=foo
p2=3

[ sect2 ]
honey=good

[ sect14 ]
this=that
'

iniFileData_topAndSections='
p1=topFoo
p2=0

[ sect1 ]
p1=foo
p2=3

[ sect2 ]
honey=good
'

iniFileData_colonInSectNames='
p1=topFoo
p2=0

[ sect:1 ]
p1=foo
p2=3

[ sect:2 ]
honey=good

'


function setupIniFileFromLastParameter()
{
	local iniFile="$1"; shift
	local iniFileData="${@: -1}"
	if [[ "$iniFileData" =~ ^($'\n'|--) ]]; then
		set -- "${@:1:$(($#-1))}"
		dedent -R iniFileData
		echo "${iniFileData#--}" | tee "$iniFile"
	fi
	NEWPARAMS=("$@")
}

###################################################################################################
### Unit Tests

declare -A ut_iniParamGet=(
	[0]="$(cmdline "." "foo" "<defValue>" "
		foo=5
	")"
)
function ut_iniParamGet() {
	ut setup noecho
	local iniFile; bgmktemp --auto iniFile
	setupIniFileFromLastParameter "$iniFile" "$@"; set -- "${NEWPARAMS[@]}"

	ut test
	echo iniParamGet \$iniFile "$@"
	iniParamGet "$iniFile" "$@"
}

declare -A ut_iniParamSet=(
	[0]="$(cmdline "." "foo" "5" )"
)
function ut_iniParamSet() {
	ut setup noecho
	local iniFile; bgmktemp --auto iniFile

	ut test
	echo iniParamSet \$iniFile "$@"
	iniParamSet "$iniFile" "$@"
	awk 'BEGIN {print "iniFile:"} {printf("   [%s]: %s\n", NR, $0)}' "$iniFile"
}


declare -A ut_getIniParam=(
	[empty]="$(cmdline "$iniFileData_empty")"
	[noSections]="$(cmdline "$iniFileData_noSections")"
	[noTopLevel]="$(cmdline "$iniFileData_noTopLevel")"
	[topAndSections]="$(cmdline "$iniFileData_topAndSections")"
	[colonInSectNames]="$(cmdline "$iniFileData_colonInSectNames")"
)
function ut_getIniParam()
{
	ut setup
	local iniFile; bgmktemp --auto iniFile
	echo "$1" | tee "$iniFile"

	ut test
	getIniParam "$iniFile" '.' p1
	getIniParam "$iniFile" '.' p2
	getIniParam "$iniFile" '.' honey
	getIniParam "$iniFile" '.' noExist

	getIniParam "$iniFile" 'sect1' p1
	getIniParam "$iniFile" 'sect1' p2
	getIniParam "$iniFile" 'sect1' honey
	getIniParam "$iniFile" 'sect1' noExist

	getIniParam "$iniFile" 'sect2' p1
	getIniParam "$iniFile" 'sect2' p2
	getIniParam "$iniFile" 'sect2' honey
	getIniParam "$iniFile" 'sect2' noExist

	getIniParam "$iniFile" 'sect:1' p1
	getIniParam "$iniFile" 'sect:1' p2
	getIniParam "$iniFile" 'sect:1' honey
	getIniParam "$iniFile" 'sect:1' noExist
}


declare -A ut_getIniSection=(
	[empty]="$(cmdline "$iniFileData_empty")"
	[noSections]="$(cmdline "$iniFileData_noSections")"
	[noTopLevel]="$(cmdline "$iniFileData_noTopLevel")"
	[topAndSections]="$(cmdline "$iniFileData_topAndSections")"
	[colonInSectNames]="$(cmdline "$iniFileData_colonInSectNames")"
)
function ut_getIniSection()
{
	ut setup
	local iniFile; bgmktemp --auto iniFile
	echo "$1" | tee "$iniFile"

	ut test
	getIniSection "$iniFile" '.'
	getIniSection "$iniFile" 'sect1'
	getIniSection "$iniFile" 'sect2'
	getIniSection "$iniFile" 'sect:1'
}



declare -A ut_iniParamExists=(
	[empty]="$(cmdline "$iniFileData_empty")"
	[noSections]="$(cmdline "$iniFileData_noSections")"
	[noTopLevel]="$(cmdline "$iniFileData_noTopLevel")"
	[topAndSections]="$(cmdline "$iniFileData_topAndSections")"
	[colonInSectNames]="$(cmdline "$iniFileData_colonInSectNames")"
)
function ut_iniParamExists()
{
	ut setup
	local iniFile; bgmktemp --auto iniFile
	echo "$1" | tee "$iniFile"

	ut test
	iniParamExists    "$iniFile" '.' p1

	iniParamExists    "$iniFile" 'sect1' p1

	iniParamExists    "$iniFile" 'sect:1' p1
}




declare -A ut_iniSectionExists=(
	[empty]="$(cmdline "$iniFileData_empty")"
	[noSections]="$(cmdline "$iniFileData_noSections")"
	[noTopLevel]="$(cmdline "$iniFileData_noTopLevel")"
	[topAndSections]="$(cmdline "$iniFileData_topAndSections")"
	[colonInSectNames]="$(cmdline "$iniFileData_colonInSectNames")"
)
function ut_iniSectionExists()
{
	ut setup
	local iniFile; bgmktemp --auto iniFile
	echo "$1" | tee "$iniFile"

	ut test
	iniSectionExists    "$iniFile" '.'

	iniSectionExists    "$iniFile" 'sect'

	iniSectionExists    "$iniFile" 'sect1'

	iniSectionExists    "$iniFile" 'sect:1'
}




declare -A ut_listIniParam=(
	[empty]="$(cmdline "$iniFileData_empty")"
	[noSections]="$(cmdline "$iniFileData_noSections")"
	[noTopLevel]="$(cmdline "$iniFileData_noTopLevel")"
	[topAndSections]="$(cmdline "$iniFileData_topAndSections")"
	[colonInSectNames]="$(cmdline "$iniFileData_colonInSectNames")"
)
function ut_listIniParam()
{
	ut setup
	local iniFile; bgmktemp --auto iniFile
	echo "$1" | tee "$iniFile"

	ut test
	listIniParam "$iniFile" '.'
	listIniParam "$iniFile" 'sect1'
	listIniParam "$iniFile" 'sect2'
	listIniParam "$iniFile" 'sect:1'
}





declare -A ut_listIniSection=(
	[empty]="$(cmdline "$iniFileData_empty")"
	[noSections]="$(cmdline "$iniFileData_noSections")"
	[noTopLevel]="$(cmdline "$iniFileData_noTopLevel")"
	[topAndSections]="$(cmdline "$iniFileData_topAndSections")"
	[colonInSectNames]="$(cmdline "$iniFileData_colonInSectNames")"
)
function ut_listIniSection()
{
	ut setup
	local iniFile; bgmktemp --auto iniFile
	echo "$1" | tee "$iniFile"

	ut test
	listIniSection "$iniFile"
	listIniSection "$iniFile" 'sect.*'
	listIniSection "$iniFile" "sect:.*"
}



# ut_cr_iniParamSetCheckMode_inputParams[0]="iniFile0"
# ut_cr_iniParamSetCheckMode_inputParams[1]="iniFile1"
# ut_cr_iniParamSetCheckMode_inputParams[2]="iniFile2"
#
# function ut_cr_iniParamSetCheckMode()
# {
# 	local sectionName="$1"
# 	local tmpDir="$(mktemp -d --tmpdir utData.XXXXXX)"
#
# 	(
# 		cd "$tmpDir"
# 		utGetUTData "$sectionName" > $sectionName.conf
# 		utRunScript '
# 			#setup
# 			creqInit check 2
# 			cat "'"$sectionName.conf"'"
#
# 			#test
# 			cr_iniParamSet "'"$sectionName.conf"'" . p1 1
# 			cr_iniParamSet "'"$sectionName.conf"'" . p1 wrong
# 			cr_iniParamSet "'"$sectionName.conf"'" sect1 p1 one
# 			cr_iniParamSet "'"$sectionName.conf"'" sect1 p1 wrong
# 		'
# 	)
# 	local exitCode=$?
# 	[ "$tmpDir" ] && rm -rf "$tmpDir" 2>/dev/null
# 	return $exitCode
# }






function ut_setIniParam()
{
	ut setup
	local iniFile; bgmktemp --auto iniFile
	touch "$iniFile"
	cat "$iniFile"

	ut test
	setIniParam "$iniFile" "." p1 one
	setIniParam "$iniFile" "." p2 "one two"
	setIniParam "$iniFile" "." honey ""
	setIniParam "$iniFile" "sect1" p1 "=4"
	setIniParam "$iniFile" "sect1" p2 "j/l"
	setIniParam "$iniFile" "sect:1" p1 1
	setIniParam "$iniFile" "sect:1" p2 2
	setIniParam "$iniFile" "sect:1" honey 3
	cat "$iniFile"
}



declare -A ut_ini_validChars=(
	[minus]="$(        cmdline '-' )"
	[underscore]="$(   cmdline '_' )"
	[plus]="$(         cmdline '+' )"
	[equal]="$(        cmdline '=' )"
	[leftBracket]="$(  cmdline '[' )"
	[rightBracket]="$( cmdline ']' )"
	[leftBrace]="$(    cmdline '{' )"
	[rightBrace]="$(   cmdline '}' )"
	[singleQuote]="$(  cmdline "'" )"
	[doubleQuote]="$(  cmdline '"' )"
	[semiColon]="$(    cmdline ';' )"
	[colon]="$(        cmdline ':' )"
	[backslash]="$(    cmdline '\' )"
	[pipe]="$(         cmdline '|' )"
	[question]="$(     cmdline '?' )"
	[slash]="$(        cmdline '/' )"
	[period]="$(       cmdline '.' )"
	[greaterThan]="$(  cmdline '>' )"
	[comma]="$(        cmdline ',' )"
	[lessThan]="$(     cmdline '<' )"
	[tilde]="$(        cmdline '~' )"
	[tickMark]="$(     cmdline '`' )"
	[bang]="$(         cmdline '!' )"
	[atSign]="$(       cmdline '@' )"
	[hash]="$(         cmdline '#' )"
	[dollar]="$(       cmdline '$' )"
	[percent]="$(      cmdline '%' )"
	[caret]="$(        cmdline '^' )"
	[apersand]="$(     cmdline '&' )"
	[asterisk]="$(     cmdline '*' )"
	[leftParens]="$(   cmdline '(' )"
	[rightParens]="$(  cmdline ')' )"
)
function ut_ini_validChars()
{
	ut setup
	# expect to document if this character can be used in 1) a value, 2) a parameter name, 3) a section name
	ut noecho
	ut noexitcodes
	local testChar="$1"
	local iniFile; bgmktemp --auto iniFile
	cat >"$iniFile" <<-EOS
		[ readDataTest ]
		p1=c${testChar}c
		test${testChar}Name=hello

		[ test${testChar}Name ]
		p1=howdy
	EOS
	echo "<iniFile>"
	cat "$iniFile"

	echo "c${testChar}c" > "$iniFile.t1"
	echo "c${testChar}c" > "$iniFile.t2"
	echo "c${testChar}c" > "$iniFile.t3"
	echo "hello" > "$iniFile.t4"
	echo "howdy" > "$iniFile.t5"


	function report()
	{
		local testFile="$1"
		local type="$2"
		if [ "$(sort -u "$testFile" | wc -l)" == "1" ]; then
			echo "PASS    : char '$testChar' can be used in $type"
		else
			echo "INVALID : char '$testChar' can NOT be used in $type"
			#awk '{printf("   line=|%s|\n", $0)}' < <(sort -u "$testFile")
		fi
	}

	ut test
	# Can the character be used in an unquoted value string
	getIniParam -R var "$iniFile" readDataTest  p1 badValue; echo "$var" >> "$iniFile.t1"
	echo "value read from [readDataTest]p1       = '$var'"
	setIniParam        "$iniFile" writeDataTest p1 "c${testChar}c"
	var=""
	getIniParam -R var "$iniFile" writeDataTest p1 badValue; echo "$var" >> "$iniFile.t1"
	echo "unquoted      value written and reread = '$var'"

	# Can the character be used in a value string with single quotes
	setIniParam -q1    "$iniFile" singleQuoteSection p1 "c${testChar}c"
	var=""
	getIniParam -R var "$iniFile" singleQuoteSection p1 badValue; echo "$var" >> "$iniFile.t2"
	echo "single quoted value written and reread = '$var'"

	# Can the character be used in a value string with double quotes
	setIniParam -q2    "$iniFile" doubleQuoteSection p1 "c${testChar}c"
	var=""
	getIniParam -R var "$iniFile" doubleQuoteSection p1 badValue; echo "$var" >> "$iniFile.t3"
	echo "double quoted value written and reread = '$var'"

	# Can the character be used in a parameter name
	var=""
	getIniParam -R var   "$iniFile" readDataTest  "test${testChar}Name" badValue; echo "$var" >> "$iniFile.t4"
	echo "read from [readDataTest]'test${testChar}Name'      (expect 'hello') as = '$var'"
	setIniParam   "$iniFile" writeParamNameTest "test${testChar}Name" "hello"
	var=""
	getIniParam -R var "$iniFile" writeParamNameTest  "test${testChar}Name" badValue; echo "$var" >> "$iniFile.t4"
	echo "written and read back from [writeParamNameTest]test${testChar}Name' as = '$var'"

	# Can the character be used in a section name
	var=""
	getIniParam -R var "$iniFile" "test${testChar}Name" p1 badValue; echo "$var" >> "$iniFile.t5"
	echo "read from [test${testChar}Name]p1        (expect 'howdy') as = '$var'"
	setIniParam   "$iniFile" "NewSection${testChar}Name" foo "howdy"
	var=""
	getIniParam -R var "$iniFile" "NewSection${testChar}Name" foo badValue; echo "$var" >> "$iniFile.t5"
	echo "written and read back from [NewSection${testChar}Name]foo as = '$var'"

	report "$iniFile.t1" "unquoted value"
	report "$iniFile.t2" "single quoted value"
	report "$iniFile.t3" "double quoted value"
	report "$iniFile.t4" "parameter name"
	report "$iniFile.t5" "section name"
}




declare -A ut_ini_validLineFormats=(
	[1]="$( cmdline "hello"                     "hello")"
	[2]="$( cmdline "hello world"               "hello world")"
	[3]="$( cmdline " hello "                   "hello")"
	[4]="$( cmdline " hello world "             "hello world")"
	[5]="$( cmdline " hello#world "             "hello")"
	[6]="$( cmdline "hello# comment"            "hello")"
	[7]="$( cmdline "hello world # comment"     "hello world")"
	[8]="$( cmdline " hello  # comment"         "hello")"
	[9]="$( cmdline " hello world  # comment"   "hello world")"
	[10]="$(cmdline " hello#world  # comment"   "hello")"
	[11]="$(cmdline " 'hello#world'  # comment" "hello#world")"
)
function ut_ini_validLineFormats()
{
	ut setup
	local line="$1"
	local expectedValue="$2"
	local iniFile; bgmktemp --auto iniFile
	echo "p=$line" > $iniFile
	echo "line in file:   |'"$line"'|" #noecho
	echo "expected value: |'"$expectedValue"'|" #noecho
	cat "$iniFile"

	ut test
	ut expect "to see if the format in the file reads the expected value"
	getIniParam "$iniFile" '.' p
	echo "$expectedValue  <- expected" #noecho

	ut expect "that the line in the file does not change since the value written is the same"
	setIniParam "$iniFile" '.' p "$expectedValue"
	cat "$iniFile"
	echo "p=$line  <- expected" #noecho

	ut expect "that the value read back is the same as the value we just wrote"
	getIniParam "$iniFile" '.' p
	echo "$expectedValue  <- expected" #noecho
}




# function ut_configLineReplace()
# {
# 	local fileData="$1"
#
# 	local resultLabel=("true" "false")
#
# 	utRunScript -x '
# 		#setup
# 		local iniFile; bgmktemp --auto iniFile
# 		echo "$fileData" | tee "$iniFile"
# 		cp "$iniFile" "${iniFile}.orig"
# 		#test
# 		configLineReplace --wouldChangeFile "$iniFile" "hello"        ;  echo "${resultLabel[$?]:-unknown}"
# 		configLineReplace --wouldChangeFile "$iniFile" "TEXTNOTINFILE";  echo "${resultLabel[$?]:-unknown}"
# 		configLineReplace --isAlreadySet    "$iniFile" "hello"        ;  echo "${resultLabel[$?]:-unknown}"
# 		configLineReplace --isAlreadySet    "$iniFile" "TEXTNOTINFILE";  echo "${resultLabel[$?]:-unknown}"
# 	'
# 	utRunScript -x '
# 		#setup
# 		local iniFile; bgmktemp --auto iniFile
# 		echo "$fileData" | tee "$iniFile"
# 		cp "$iniFile" "${iniFile}.orig"
# 		#test
# 		configLineReplace "$iniFile" "hello"
# 		diff "${iniFile}.orig" "$iniFile" || true
# 	'
# 	utRunScript -x '
# 		#setup
# 		local iniFile; bgmktemp --auto iniFile
# 		echo "$fileData" | tee "$iniFile"
# 		cp "$iniFile" "${iniFile}.orig"
# 		#test
# 		configLineReplace "$iniFile" "hello" ".*hello.*"
# 		diff "${iniFile}.orig" "$iniFile" || true
# 	'
# 	utRunScript -x '
# 		#setup
# 		local iniFile; bgmktemp --auto iniFile
# 		echo "$fileData" | tee "$iniFile"
# 		cp "$iniFile" "${iniFile}.orig"
# 		#test
# 		configLineReplace "$iniFile" "foo=5" "^[[:space:]]*foo[[:space:]]*="
# 		diff "${iniFile}.orig" "$iniFile" || true
# 	'
# 	utRunScript -x '
# 		#setup
# 		local iniFile; bgmktemp --auto iniFile
# 		echo "$fileData" | tee "$iniFile"
# 		cp "$iniFile" "${iniFile}.orig"
# 		#test
# 		configLineReplace "$iniFile" "foo=blue" "^[[:space:]]*foo[[:space:]]*="
# 		diff "${iniFile}.orig" "$iniFile" || true
# 		'
# 	utRunScript -x '
# 		#setup
# 		local iniFile; bgmktemp --auto iniFile
# 		echo "$fileData" | tee "$iniFile"
# 		cp "$iniFile" "${iniFile}.orig"
# 		#test
# 		configLineReplace "$iniFile" "/var/www/"
# 		diff "${iniFile}.orig" "$iniFile" || true
# 	'
# 	utRunScript -x '
# 		#setup
# 		local iniFile; bgmktemp --auto iniFile
# 		echo "$fileData" | tee "$iniFile"
# 		cp "$iniFile" "${iniFile}.orig"
# 		#test
# 		configLineReplace "$iniFile" "/var/www/*"
# 		diff "${iniFile}.orig" "$iniFile" || true
# 	'
# 	utRunScript -x '
# 		#setup
# 		local iniFile; bgmktemp --auto iniFile
# 		echo "$fileData" | tee "$iniFile"
# 		cp "$iniFile" "${iniFile}.orig"
# 		#test
# 		configLineReplace "$iniFile" "path=/var/www/" ".*=/var/www/"
# 		diff "${iniFile}.orig" "$iniFile" || true
# 	'
# 	utRunScript -x '
# 		#setup
# 		local iniFile; bgmktemp --auto iniFile
# 		echo "$fileData" | tee "$iniFile"
# 		cp "$iniFile" "${iniFile}.orig"
# 		#test
# 		configLineReplace "$iniFile" "path=\"5\"" "path=.*"
# 		diff "${iniFile}.orig" "$iniFile" || true
# 	'
# }
# ut_configLineReplace_inputParams[1]='
# # this is a comment
# foo=5
# foo="5"
# bar=this
# foo=that
# '
# ut_configLineReplace_inputParams[2]='
# hello
# # this is a comment
# #hello
# hello5
# hello goo
# '
# ut_configLineReplace_inputParams[3]='
# hello
# #hello
# hello5
# hello goo
# '
# ut_configLineReplace_inputParams[4]='
# hello
# # this is a comment
# foo="blue"
# foo=5
# path=/var/www/
# path2=/var/www/
# /var/www/*
# hello5
# hello goo
# '
