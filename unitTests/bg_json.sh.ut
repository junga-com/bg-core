#!/usr/bin/env bg-utRunner

import bg_objects.sh  ;$L1;$L2
import bg_json.sh  ;$L1;$L2

DeclareClass TestClass '
	memberVars:
	 pmemA="hello"
	 pmemB=5
'
function TestClass::__construct()
{
	this[memberOne]=" this and that"
	this[memberTwo]="14"
	$this[numbers]=new Map
	local -n numbers; GetOID ${this[numbers]} numbers || assertError
	numbers[zero]=0
	numbers[one]=1
	numbers[two]=2
	$this.numbers[obj]=new Object

	$this[words]=new Array "zero" "one" "two"
	$this.words[3]=new Object
#	local -n words; GetOID ${this[words]} words || assertError
#	words=(zero one two)
}

DeclareClassEnd TestClass


declare -A ut_Object_toJSON=(
	[all]="--all"
	[real]=""
)
function ut_Object_toJSON()
{
	ut setup
	local -n foo; ConstructObject TestClass foo

	ut test
	$foo.toJSON

	ut test
	$foo.toJSON "$1"
}

declare -A ut_ConstructObjectFromJson=(
	[plain]="$(cmdline "$(dedent '
	{
	   "pmemB": "5",
	   "pmemA": "hello",
	   "memberTwo": "14",
	   "memberOne": " this and that",
	   "words": [
	      "zero",
	      "one",
	      "two",
	      {}
	   ]
	   "numbers": {
	      "two": "2",
	      "obj": {}
	      "zero": "0",
	      "one": "1"
	   }
	}
	')")"
	[withSys]="$(cmdline "$(dedent '
	{
	   "pmemB": "5",
	   "pmemA": "hello",
	   "memberTwo": "14",
	   "memberOne": " this and that",
	   "words": [
	      "zero",
	      "one",
	      "two",
	      {
	         "_CLASS": "Object",
	         "_OID": "sessionOID_2"
	      }
	   ],
	   "numbers": {
	      "two": "2",
	      "obj": {
	         "_CLASS": "Object",
	         "_OID": "sessionOID_4"
	      },
	      "zero": "0",
	      "one": "1",
	      "_CLASS": "Map",
	      "_OID": "sessionOID_3"
	   },
	   "_CLASS": "TestClass",
	   "_OID": "sessionOID_0"
	}
	')")"
)
function ut_ConstructObjectFromJson()
{
	ut setup
	local jsonFile; bgmktemp --auto jsonFile
	echo "$1" > "$jsonFile"
	cat "$jsonFile"

	ut test
	local obj; ConstructObjectFromJson obj "$jsonFile"
	printfVars  obj
}

declare -A ut_jsonEscape=(
	[100]="$(cmdline '"hello"' $'\\"hello\\"')"
	[110]="$(cmdline 'path/file.data' $'path\/file.data')"
	[120]="$(cmdline $'\b\n\f\r\t' '\b\n\f\r\t')"
)
function ut_jsonEscape()
{
	ut setup
	local val="$1"
	local valEsc="$2"
	local test1 test2

	ut test noecho
	printf "%-14s:%s\n"   "input"            "$val"
	printf "%-14s:%s\n\n" "input escaped"    "$valEsc"

	test1="$val"
	jsonEscape test1
	printf "%-14s:%-30s " "escaped"  "$test1"
	[ "$test1" == "$valEsc" ] && printf "CORRECT\n" || printf "FAIL\n"

	test2="$valEsc"
	jsonUnescape test2
	printf "%-14s:%-30s " "unescaped"  "$test2"
	[ "$test2" == "$val" ] && printf "CORRECT\n" || printf "FAIL\n"
}
