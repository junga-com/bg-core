#!/usr/bin/env bash
source /usr/lib/bg_core.sh

import bg_objects.sh  ;$L1;$L2


DeclareClass Widget1
Widget1::__construct() {
	this[count]=0
	this[type]="i am a widget"
	$_this.data=new Array
}
Widget1::reset() {
	count=0
	data=()
}
Widget1::doFun() {
	data+=("$@")
}

DeclareClass Container1
Container1::__construct() {
	this[type]="i am a container"
	$_this.wA=new Widget1
	$_this.wB=new Widget1
}
Container1::process() {
	$_this.wA.doFun yo
	$_this.wB.doFun hello world
}


DeclareClass Top1
Top1::__construct() {
	this[type]="i am a top"
	$_this.contain1=new Container1
	$_this.contain2=new Container1
}
Top1::start() {
	$_this.contain1.process
}
Top1::end() {
	$_this.contain1.process
}

ConstructObject Top1 top1

DeclareClass Foo
Foo::noop() {
	local p1
}
Foo::doSomething() {
	while [ $# -gt 0 ]; do case $1 in
		-a)  myAFlag="-a" ;;
		-b | --my-bFlag) myBFlag="-b" ;;
		-c*) bgOptionGetOpt val: myCOptWithArg "$@" && shift ;;
		-T*) bgOptionGetOpt opt: passThruOpts "$@" && shift ;;
		-t)  bgOptionGetOpt opt  passThruOpts "$@" && shift ;;
		-d)  myDFlag="-d" ;;
		*)  bgOptionsEndLoop "$@" && break; set -- "${bgOptionsExpandedOpts[@]}"; esac; shift;
	done
	local p1="$1"; shift
	returnValue "hello" $p1
}

ConstructObject Foo obj

#printfVars top1


startingOOCount="$_bgclassCallCount"

bgtimerStart
if true; then
	for ((i=0; i<100; i++)); do
		$top1.start
		$top1.contain1.wA.reset
		$top1.contain1.wA.foo.bar="happy birthday"
		$top1.contain1.wA.foo.bar.unset
		$top1.contain1.wA.foo.exists || assertError "should still exist"
		$top1.contain1.wA.foo.isA "Object"  || assertError "should be Object"
		$top1.contain1.wA.foo.unset
		$top1.contain1.wA.foo.exists && assertError "should not still exist"
		$top1.contain1.wA.isA "Widget1"  || assertError -V waType:"$($top1.contain1.wA.getType)" "should be Widget1"
	done

	((iterationCount=_bgclassCallCount-startingOOCount))
	printfVars -l"Object Calls -- mix" count:iterationCount
	bgtimerGetNano -R totalNano
	bgtimerPrint
	bgNanoToSec -R perOOCall $((totalNano / iterationCount))  6
	printf "time per oo call = %s\n" "$perOOCall"

	printfVars msCP1 msCP2 msCP3 msCP4 msTotal
else
	iterationCount=1200
fi




echo
msCP1=0; msCP2=0; msCP3=0; msCP4=0; msTotal=0
bgtimerStart
for ((i=0; i<$iterationCount; i++)); do
	$obj[noopVar]
done
printfVars -l"OO Calls null var" iterationCount
bgtimerGetNano -R totalNano
bgtimerPrint
bgNanoToSec -R perNormCall $((totalNano / iterationCount))  6
printf "time per normal call = %s\n" "$perNormCall"
printfVars msCP1 msCP2 msCP3 msCP4 msTotal



echo
msCP1=0; msCP2=0; msCP3=0; msCP4=0; msTotal=0
bgtimerStart
for ((i=0; i<$iterationCount; i++)); do
	$obj.noop
done
printfVars -l"OO Calls noop method" iterationCount
bgtimerGetNano -R totalNano
bgtimerPrint
bgNanoToSec -R perNormCall $((totalNano / iterationCount))  6
printf "time per normal call = %s\n" "$perNormCall"
printfVars msCP1 msCP2 msCP3 msCP4 msTotal



echo
msCP1=0; msCP2=0; msCP3=0; msCP4=0; msTotal=0
bgtimerStart
for ((i=0; i<$iterationCount; i++)); do
	$obj.doSomething foobar
done
printfVars -l"OO Calls -- doSomething()" iterationCount
bgtimerGetNano -R totalNano
bgtimerPrint
bgNanoToSec -R perNormCall $((totalNano / iterationCount))  6
printf "time per normal call = %s\n" "$perNormCall"
printfVars msCP1 msCP2 msCP3 msCP4 msTotal



if true; then
	echo
	function doSomething() {
		while [ $# -gt 0 ]; do case $1 in
			-a)  myAFlag="-a" ;;
			-b | --my-bFlag) myBFlag="-b" ;;
			-c*) bgOptionGetOpt val: myCOptWithArg "$@" && shift ;;
			-T*) bgOptionGetOpt opt: passThruOpts "$@" && shift ;;
			-t)  bgOptionGetOpt opt  passThruOpts "$@" && shift ;;
			-d)  myDFlag="-d" ;;
			*)  bgOptionsEndLoop "$@" && break; set -- "${bgOptionsExpandedOpts[@]}"; esac; shift;
		done
		local p1="$1"; shift
		returnValue "hello" $p1
	}
	bgtimerStart
	for ((i=0; i<$iterationCount; i++)); do
		Foo::doSomething foobar
	done
	printfVars -l"Normal Calls - Foo::doSomething()" iterationCount
	bgtimerGetNano -R totalNano
	bgtimerPrint
	bgNanoToSec -R perNormCall $((totalNano / iterationCount))  6
	printf "time per normal call = %s\n" "$perNormCall"
fi






if true; then
	echo
	function noopCall() {
		local p1
	}
	bgtimerStart
	for ((i=0; i<$iterationCount; i++)); do
		noopCall foobar
	done
	printfVars -l"Normal Calls - empty function" iterationCount
	bgtimerGetNano -R totalNano
	bgtimerPrint
	bgNanoToSec -R perNormCall $((totalNano / iterationCount))  6
	printf "time per normal call = %s\n" "$perNormCall"
fi

#printfVars top1
