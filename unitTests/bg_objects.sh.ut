#!/usr/bin/env bg-utRunner

import bg_objects.sh  ;$L1;$L2


declare -A ut__parseObjSyntax=(
	[pOfEmptyOp0]="$(cmdline ".foo")"
	[pOfEmptyOp1]="$(cmdline ".bar.foo")"
	[pOfEmptyOp2]="$(cmdline ".foo p1")"
	[pOfEmptyOp3]="$(cmdline ".bar.foo p1")"

	[pOfUnsetOp0]="$(cmdline ".unset")"
	[pOfUnsetOp1]="$(cmdline ".foo.unset")"
	[pOfUnsetOp2]="$(cmdline ".unset p1")"
	[pOfUnsetOp3]="$(cmdline ".foo.unset p1")"

	[pOfNewOp0]="$(cmdline "=new")"
	[pOfNewOp1]="$(cmdline ".foo=new")"
	[pOfNewOp2]="$(cmdline "=new p1")"
	[pOfNewOp3]="$(cmdline ".foo=new p1")"

	[pOfAssignOp0]="$(cmdline "=")"
	[pOfAssignOp1]="$(cmdline ".foo=")"
	[pOfAssignOp2]="$(cmdline "= p1")"
	[pOfAssignOp3]="$(cmdline "=p1")"
	[pOfAssignOp4]="$(cmdline ".foo= p1")"
	[pOfAssignOp5]="$(cmdline ".foo=p1")"
)
function ut__parseObjSyntax() {
	ut setup
	local memberChain memberOp argsV
	ut test
	echo "'$*'"; _parseObjSyntax  memberChain memberOp argsV "$@"; printfVars memberChain memberOp argsV
}


function ut_initialState()
{
	# expect: shows the classes that ae initially created and their content
	ut setup
	ut filter '([[]vmtCacheNum[[:space:]]*[]]=).[0-9]*.###\1<redacted>'
	function showClass() {
		local class="$1"
		printf "#\n#\n#------------------ $class --------------------\n"
		eval local globalArrayVars='"${!'"$class"'*}"'
		echo "global array vars: $globalArrayVars"
		printfVars --noObjects $class -l"#" ${class}_vmt "$(strSetSubtract "$globalArrayVars" "$class  ${class}_vmt")"
	}
	ut test
	echo Object ${Object[subClasses]}
	local class; for class in Object ${Object[subClasses]}; do
		showClass "$class"
	done
}

function ut_isDerivedFrom()
{
	# expect: that true tests indicate true and false tests indicate false
	ut setup
	DeclareClass Animal
	DeclareClass -f Dog : Animal

	ut test
	ut expect "these to be true"
	$Dog.isDerivedFrom "Animal"       && echo yes || echo no
	$Animal.isDerivedFrom "Animal"    && echo yes || echo no
	$Dog.isDerivedFrom "Object"       && echo yes || echo no

	echo
	ut expect "these to be false"
	$Animal.isDerivedFrom "Dog"       && echo yes || echo no
	$Animal.isDerivedFrom "Dog" # to document the return code
	$Animal.isDerivedFrom "Car"       && echo yes || echo no
}


function ut_getClassMethods()
{
	# expect: the correct set of methods to be printed to stdout. -i includes inherited, -d changes the delimiter between methods
	ut setup
	DeclareClass -f Animal
	Animal::speak() { echo "I am just an animal"; }
	Animal::pet() { echo "that's nice"; }
	Animal::feed() { echo "now that's more like it!"; }

	ut test
	$Animal.getClassMethods
	$Animal.getClassMethods -i
	$Animal.getClassMethods -d$'\n'
}


function ut_ConstructObject()
{
	# expect: the state after constructing a object 3 different ways is all consistent with each other
	ut setup
	DeclareClass Animal
	Animal::__construct() {
		this[species]="unk"
		this[family]="unk"
		this[legCount]="unk"
	}
	Animal::speak() { echo "I am just an animal"; }
	Animal::pet() { echo "that's nice"; }
	Animal::feed() { echo "now that's more like it!"; }

	ut test
	local pet; ConstructObject Animal pet
	local petOID="$(GetOID "$pet")"
	eval 'local petOIDVars="${!'"$petOID"'*}"'
	echo "global vars for this object = ${petOIDVars}"
	printfVars --noObjects pet $petOIDVars

	ut test
	local -A pet2; ConstructObject Animal pet2
	local pet2OID="$(GetOID "$pet2")"
	eval 'local pet2OIDVars="${!'"$pet2OID"'*}"'
	echo "vars for this object = ${pet2OIDVars}"
	printfVars --noObjects $pet2OIDVars

	ut test
	local -n pet3; ConstructObject Animal pet3
	local pet3OID="$(GetOID "$pet3")"
	eval 'local pet3OIDVars="${!'"$pet3OID"'*}"'
	echo "global vars for this object = ${pet3OIDVars}"
	printfVars --noObjects pet3 $pet3OIDVars
}


function ut__classUpdateVMT()
{
	# expect:
	ut setup
	DeclareClass -f Animal
	Animal::speak() { echo "I am just an animal"; }
	$Animal.getClassMethods

	ut test
	Animal::pet() { echo "that's nice"; }; true
	Animal::feed() { echo "now that's more like it!"; }; true

	ut expect: that pet and feed are not in this list
	echo "${Animal[methods]}"

	_classUpdateVMT -f "Animal"

	ut expect: that now pet and feed are in this list
	echo "${Animal[methods]}"
}


function ut_Array()
{
	ut test
	local -n a1; ConstructObject Array a1
	printfVars a1
	a1=(one two three)
	printfVars a1

	ut test
	local a2; ConstructObject Array a2
	$a2.getOID
	local -n a2OID; $a2.getOID a2OID
	printfVars a2
	a2OID=(one two three)
	printfVars a2
	$a2.getSize
}


function ut_Map()
{
	ut test
	local -n a1; ConstructObject Map a1
	printfVars a1
	a1=([one]=1 [two]=2 [three]=3)
	printfVars a1

	ut test
	local a2; ConstructObject Map a2
	$a2.getOID
	printfVars --noObjects "$($a2.getOID)"{,_sys}
	local -n a2OID; $a2.getOID a2OID
	printfVars a2
	a2OID=([one]=1 [two]=2 [three]=3)
	$a2.getIndexes
	printfVars a2
	printfVars --noObjects "$($a2.getOID)"{,_sys}
	$a2.getSize
}


function ut_Stack()
{
	ut test
	local -n a1; ConstructObject Stack a1
	printfVars a1
	$a1.push one
	$a1.push two
	$a1.push three
	$a1.getSize
	printfVars a1

	for ((i=0; i<$($a1.getSize); i++)); do $a1.peek $i; done

	local element
	while $a1.pop element; do printfVars element; done

	ut test
	local a2; ConstructObject Stack a2
	printfVars a2
	$a2.push one
	$a2.push two
	$a2.push three
	$a2.getSize
	printfVars a2

	for ((i=0; i<$($a2.getSize); i++)); do $a2.peek $i; done

	local element
	while $a2.pop element; do printfVars element; done
}

function ut_nestedObjects()
{
	# expect: the DataFile::read() method refer to "filename" and "data" directly without using the array notation this[filename]
	ut setup
	DeclareClass DataFile
	DataFile::__construct() {
		this[filename]="$1"; shift
		$_this.data=new Array
		$_this.read
	}
	DataFile::read() {
		if [ -f "$filename" ]; then
			mapfile -t data <"$filename"
		fi
	}
	local tmpFile; bgmktemp tmpFile
	echo "$(dedent '
		one fish
		two fish
		red fish
		blue fish
	')" | tee "$tmpFile"

	ut test
	ConstructObject DataFile datafile "$tmpFile"
	printfVars datafile
}

function ut_Object_unset() {
	ut setup
	local -n obj; ConstructObject Object obj
	ut test
	obj[foo]="hello"
	ut expect that foo is present
	printfVars obj
	$obj.foo.unset

	ut expect that foo is not present
	printfVars obj
}

function ut_Object_exists() {
	ut setup
	local -n obj; ConstructObject Object obj
	ut test
	ut expect that foo does not exist
	$obj.foo.exists && echo true || echo false

	obj[foo]="hello"
	ut expect that foo exists now
	$obj.foo.exists && echo true || echo false
}

function ut_Object_isA() {
	ut setup
	local -n obj; ConstructObject Object obj
	ut test
	ut expect that only isA object will be true
	$obj.isA Object && echo true || echo false
	$obj.isA Array  && echo true || echo false
	$obj.isA Foo    && echo true || echo false
}

function ut_Object_getType() {
	ut setup
	local -n obj; ConstructObject Object obj
	$obj.foo=5
	$obj.array=new Array

	ut test
	$obj.getType
	local type; $obj.getType type; printfVars type
	$obj.foo.getType
	$obj.array.getType
	$obj.getIndexes.getType
	$obj.dontExist.getType
}

function ut_Object_getOID() {
	ut setup
	ut filter 'heap_([^_]*)_([^_ ]*)###heap_\1_<redacted>'
	local -n obj; ConstructObject Object obj
	$obj.foo=5
	$obj.array=new Array

	ut test
	$obj.getOID
	local type; $obj.getOID type; printfVars type
	$obj.foo.getOID
	$obj.array.getOID
	$obj.getIndexes.getOID
	$obj.dontExist.getOID
}

function ut_Object_getRef() {
	ut setup
	ut filter 'heap_([^_]*)_([^_ ]*)###heap_\1_<redacted>'
	local -n obj; ConstructObject Object obj
	$obj.foo=5
	$obj.array=new Array

	ut test
	$obj.getRef
	local type; $obj.getRef type; printfVars --noObjects type
	$obj.foo.getRef
	$obj.array.getRef
	$obj.getIndexes.getRef
	$obj.dontExist.getRef
}

function ut_Object_toString() {
	ut setup
	local -n obj; ConstructObject Object obj
	$obj.foo=5
	$obj.array=new Array

	ut test
	$obj.toString
	$obj.foo.toString
	$obj.foo.toString --title
	$obj.foo.toString --title=
	$obj.foo.toString --title=foo
	$obj.foo.toString --title=DifferentLable
	$obj.array.toString
	$obj.array.toString --title
	$obj.array[0]="hiya"
	$obj.array.toString
	$obj.getIndexes.toString
	$obj.getIndexes.toString
	$obj.dontExist.toString --title
	$obj.dontExist.toString
	$obj[dontExist].toString
	$obj.::dontExist.toString
	$obj.Object::dontExist.toString
}

function ut_Object_assignNewOp() {
	ut setup
	local -n obj; ConstructObject Object obj
	ut test
	$obj.foo=new Array
	printfVars obj
}

function ut_Object_staticCallSyntax() {
	ut setup
	local -n obj; ConstructObject Object obj
	ut test
	ut expect that the Object class object is printed
	$obj.static.toString
}

function ut_Object_chainCallSyntax() {
	ut setup
	local -n obj; ConstructObject Object obj
	$obj.foo=new Map
	$obj.foo[bar]="hello world"
	ut test
	ut expect "that foo member's toString method is called"
	$obj.foo.toString

	ut expect "that object members can be created on demand"
	$obj.foo[one].two="yoyo"
	printfVars obj
}

function ut_Object_equalsOp() {
	ut setup
	local -n obj; ConstructObject Object obj
	$obj.num=5
	$obj.str="hello"

	ut test
	ut expect "that the new values are appended. This documents whether num is appended as a string or added"
	$obj.num+=10
	$obj.str+=" world"
	$obj.toString

	ut expect "equal to replace the previous value"
	$obj.num=10
	$obj.str="goodbye"
	$obj.toString
}

function ut_Object_virtualCallSyntax() {
	ut setup
	DeclareClass Base
	Base::one() { echo "Base::one"; }
	Base::two() { echo "Base::two"; }
	DeclareClass Derived : Base
	Derived::one() { echo "Derived::one"; $super.one; }
	Derived::two() { echo "Derived::two"; }
	local -n obj; ConstructObject Derived obj

	ut test
	ut expect "normal polymorphism -- to see only msg from Derived::two"
	$obj.two

	ut expect "explicit call -- to see only msg from Base::two"
	$obj.Base::two

	ut expect "polymorphism with super -- to see msg from Derived::one and then from Base:one"
	$obj.one
}

function ut_Object_memberVarReadAccess() {
	ut setup
	local -n obj; ConstructObject Object obj
	$obj.foo="hello world"
	ut test
	ut expect "to see what happens when we reference an attribute that exists with no operator"
	$obj.foo
	$obj[foo]
	ut expect "that all of these syntax will be interpreted as a missing member var when it does not exist"
	$obj.bar
	$obj[bar]
	$obj[doit] p1 # this would look like a method call except the [] means that doit has to be a member var
	ut expect "that these two syntax will be interpreted as a missing method when it does not exist"
	Try:
		$obj.::doit
	Catch: && {
		echo "** caught expected exception"
		printfVars "   " catch_errorClass catch_errorFn catch_errorCode catch_errorDescription
	}
	Try:
		$obj.doit p1 p2 p3
	Catch: && {
		echo "** caught expected exception"
		printfVars "   " catch_errorClass catch_errorFn catch_errorCode catch_errorDescription
	}
}

function ut_expressionErrors() {
	ut setup
	ConstructObject Object obj

	ut test
	$obj.:foo
}
